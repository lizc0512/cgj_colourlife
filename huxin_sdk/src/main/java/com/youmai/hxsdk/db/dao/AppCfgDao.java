package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.AppCfg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_CFG".
*/
public class AppCfgDao extends AbstractDao<AppCfg, Long> {

    public static final String TABLENAME = "APP_CFG";

    /**
     * Properties of entity AppCfg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Table_id = new Property(0, Long.class, "table_id", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Fileurl = new Property(2, String.class, "fileurl", false, "FILEURL");
        public final static Property Filename = new Property(3, String.class, "filename", false, "FILENAME");
        public final static Property Fversion = new Property(4, String.class, "fversion", false, "FVERSION");
        public final static Property Mark = new Property(5, String.class, "mark", false, "MARK");
        public final static Property Update_version = new Property(6, String.class, "update_version", false, "UPDATE_VERSION");
        public final static Property Channel = new Property(7, String.class, "channel", false, "CHANNEL");
        public final static Property Version = new Property(8, String.class, "version", false, "VERSION");
    }


    public AppCfgDao(DaoConfig config) {
        super(config);
    }
    
    public AppCfgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_CFG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: table_id
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"FILEURL\" TEXT," + // 2: fileurl
                "\"FILENAME\" TEXT," + // 3: filename
                "\"FVERSION\" TEXT," + // 4: fversion
                "\"MARK\" TEXT," + // 5: mark
                "\"UPDATE_VERSION\" TEXT," + // 6: update_version
                "\"CHANNEL\" TEXT," + // 7: channel
                "\"VERSION\" TEXT);"); // 8: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_CFG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppCfg entity) {
        stmt.clearBindings();
 
        Long table_id = entity.getTable_id();
        if (table_id != null) {
            stmt.bindLong(1, table_id);
        }
        stmt.bindLong(2, entity.getId());
 
        String fileurl = entity.getFileurl();
        if (fileurl != null) {
            stmt.bindString(3, fileurl);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(4, filename);
        }
 
        String fversion = entity.getFversion();
        if (fversion != null) {
            stmt.bindString(5, fversion);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(6, mark);
        }
 
        String update_version = entity.getUpdate_version();
        if (update_version != null) {
            stmt.bindString(7, update_version);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(8, channel);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(9, version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppCfg entity) {
        stmt.clearBindings();
 
        Long table_id = entity.getTable_id();
        if (table_id != null) {
            stmt.bindLong(1, table_id);
        }
        stmt.bindLong(2, entity.getId());
 
        String fileurl = entity.getFileurl();
        if (fileurl != null) {
            stmt.bindString(3, fileurl);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(4, filename);
        }
 
        String fversion = entity.getFversion();
        if (fversion != null) {
            stmt.bindString(5, fversion);
        }
 
        String mark = entity.getMark();
        if (mark != null) {
            stmt.bindString(6, mark);
        }
 
        String update_version = entity.getUpdate_version();
        if (update_version != null) {
            stmt.bindString(7, update_version);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(8, channel);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(9, version);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppCfg readEntity(Cursor cursor, int offset) {
        AppCfg entity = new AppCfg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // table_id
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileurl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filename
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fversion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // update_version
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // channel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppCfg entity, int offset) {
        entity.setTable_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setFileurl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilename(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFversion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdate_version(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChannel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVersion(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppCfg entity, long rowId) {
        entity.setTable_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppCfg entity) {
        if(entity != null) {
            return entity.getTable_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppCfg entity) {
        return entity.getTable_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
