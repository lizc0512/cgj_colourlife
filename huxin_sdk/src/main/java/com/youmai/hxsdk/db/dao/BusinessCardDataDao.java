package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.BusinessCardData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUSINESS_CARD_DATA".
*/
public class BusinessCardDataDao extends AbstractDao<BusinessCardData, Long> {

    public static final String TABLENAME = "BUSINESS_CARD_DATA";

    /**
     * Properties of entity BusinessCardData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property HeadUrl = new Property(4, String.class, "headUrl", false, "HEAD_URL");
        public final static Property Company = new Property(5, String.class, "company", false, "COMPANY");
        public final static Property Job = new Property(6, String.class, "job", false, "JOB");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property Sex = new Property(8, String.class, "sex", false, "SEX");
        public final static Property Contact_id = new Property(9, Long.class, "contact_id", false, "CONTACT_ID");
    }


    public BusinessCardDataDao(DaoConfig config) {
        super(config);
    }
    
    public BusinessCardDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUSINESS_CARD_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"PHONE\" TEXT," + // 2: phone
                "\"NAME\" TEXT," + // 3: name
                "\"HEAD_URL\" TEXT," + // 4: headUrl
                "\"COMPANY\" TEXT," + // 5: company
                "\"JOB\" TEXT," + // 6: job
                "\"ADDRESS\" TEXT," + // 7: address
                "\"SEX\" TEXT," + // 8: sex
                "\"CONTACT_ID\" INTEGER);"); // 9: contact_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUSINESS_CARD_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BusinessCardData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(5, headUrl);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(6, company);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(7, job);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        Long contact_id = entity.getContact_id();
        if (contact_id != null) {
            stmt.bindLong(10, contact_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BusinessCardData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(5, headUrl);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(6, company);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(7, job);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(9, sex);
        }
 
        Long contact_id = entity.getContact_id();
        if (contact_id != null) {
            stmt.bindLong(10, contact_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BusinessCardData readEntity(Cursor cursor, int offset) {
        BusinessCardData entity = new BusinessCardData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // company
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // job
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // contact_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BusinessCardData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCompany(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJob(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContact_id(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BusinessCardData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BusinessCardData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BusinessCardData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
