package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.BusinessCardInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUSINESS_CARD_INFO".
*/
public class BusinessCardInfoDao extends AbstractDao<BusinessCardInfo, Long> {

    public static final String TABLENAME = "BUSINESS_CARD_INFO";

    /**
     * Properties of entity BusinessCardInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Info = new Property(4, String.class, "info", false, "INFO");
        public final static Property Info_type = new Property(5, Integer.class, "info_type", false, "INFO_TYPE");
    }


    public BusinessCardInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BusinessCardInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUSINESS_CARD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHONE\" TEXT," + // 1: phone
                "\"USER_ID\" INTEGER," + // 2: userId
                "\"TYPE\" TEXT," + // 3: type
                "\"INFO\" TEXT," + // 4: info
                "\"INFO_TYPE\" INTEGER);"); // 5: info_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUSINESS_CARD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BusinessCardInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(5, info);
        }
 
        Integer info_type = entity.getInfo_type();
        if (info_type != null) {
            stmt.bindLong(6, info_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BusinessCardInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(5, info);
        }
 
        Integer info_type = entity.getInfo_type();
        if (info_type != null) {
            stmt.bindLong(6, info_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BusinessCardInfo readEntity(Cursor cursor, int offset) {
        BusinessCardInfo entity = new BusinessCardInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // info
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // info_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BusinessCardInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInfo_type(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BusinessCardInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BusinessCardInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BusinessCardInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
