package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.CacheMsgBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CACHE_MSG_BEAN".
*/
public class CacheMsgBeanDao extends AbstractDao<CacheMsgBean, Long> {

    public static final String TABLENAME = "CACHE_MSG_BEAN";

    /**
     * Properties of entity CacheMsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgType = new Property(1, int.class, "msgType", false, "MSG_TYPE");
        public final static Property MsgTime = new Property(2, long.class, "msgTime", false, "MSG_TIME");
        public final static Property SenderUserId = new Property(3, int.class, "senderUserId", false, "SENDER_USER_ID");
        public final static Property ReceiverUserId = new Property(4, int.class, "receiverUserId", false, "RECEIVER_USER_ID");
        public final static Property SenderPhone = new Property(5, String.class, "senderPhone", false, "SENDER_PHONE");
        public final static Property ReceiverPhone = new Property(6, String.class, "receiverPhone", false, "RECEIVER_PHONE");
        public final static Property ContentJsonBody = new Property(7, String.class, "contentJsonBody", false, "CONTENT_JSON_BODY");
        public final static Property Send_flag = new Property(8, int.class, "send_flag", false, "SEND_FLAG");
        public final static Property IsRightUI = new Property(9, int.class, "isRightUI", false, "IS_RIGHT_UI");
        public final static Property Is_read = new Property(10, int.class, "is_read", false, "IS_READ");
        public final static Property MsgId = new Property(11, Long.class, "msgId", false, "MSG_ID");
    }


    public CacheMsgBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CacheMsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CACHE_MSG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 1: msgType
                "\"MSG_TIME\" INTEGER NOT NULL ," + // 2: msgTime
                "\"SENDER_USER_ID\" INTEGER NOT NULL ," + // 3: senderUserId
                "\"RECEIVER_USER_ID\" INTEGER NOT NULL ," + // 4: receiverUserId
                "\"SENDER_PHONE\" TEXT," + // 5: senderPhone
                "\"RECEIVER_PHONE\" TEXT," + // 6: receiverPhone
                "\"CONTENT_JSON_BODY\" TEXT," + // 7: contentJsonBody
                "\"SEND_FLAG\" INTEGER NOT NULL ," + // 8: send_flag
                "\"IS_RIGHT_UI\" INTEGER NOT NULL ," + // 9: isRightUI
                "\"IS_READ\" INTEGER NOT NULL ," + // 10: is_read
                "\"MSG_ID\" INTEGER);"); // 11: msgId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CACHE_MSG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CacheMsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgType());
        stmt.bindLong(3, entity.getMsgTime());
        stmt.bindLong(4, entity.getSenderUserId());
        stmt.bindLong(5, entity.getReceiverUserId());
 
        String senderPhone = entity.getSenderPhone();
        if (senderPhone != null) {
            stmt.bindString(6, senderPhone);
        }
 
        String receiverPhone = entity.getReceiverPhone();
        if (receiverPhone != null) {
            stmt.bindString(7, receiverPhone);
        }
 
        String contentJsonBody = entity.getContentJsonBody();
        if (contentJsonBody != null) {
            stmt.bindString(8, contentJsonBody);
        }
        stmt.bindLong(9, entity.getSend_flag());
        stmt.bindLong(10, entity.getIsRightUI());
        stmt.bindLong(11, entity.getIs_read());
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(12, msgId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CacheMsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgType());
        stmt.bindLong(3, entity.getMsgTime());
        stmt.bindLong(4, entity.getSenderUserId());
        stmt.bindLong(5, entity.getReceiverUserId());
 
        String senderPhone = entity.getSenderPhone();
        if (senderPhone != null) {
            stmt.bindString(6, senderPhone);
        }
 
        String receiverPhone = entity.getReceiverPhone();
        if (receiverPhone != null) {
            stmt.bindString(7, receiverPhone);
        }
 
        String contentJsonBody = entity.getContentJsonBody();
        if (contentJsonBody != null) {
            stmt.bindString(8, contentJsonBody);
        }
        stmt.bindLong(9, entity.getSend_flag());
        stmt.bindLong(10, entity.getIsRightUI());
        stmt.bindLong(11, entity.getIs_read());
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(12, msgId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CacheMsgBean readEntity(Cursor cursor, int offset) {
        CacheMsgBean entity = new CacheMsgBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // msgType
            cursor.getLong(offset + 2), // msgTime
            cursor.getInt(offset + 3), // senderUserId
            cursor.getInt(offset + 4), // receiverUserId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // senderPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // receiverPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // contentJsonBody
            cursor.getInt(offset + 8), // send_flag
            cursor.getInt(offset + 9), // isRightUI
            cursor.getInt(offset + 10), // is_read
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // msgId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CacheMsgBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgType(cursor.getInt(offset + 1));
        entity.setMsgTime(cursor.getLong(offset + 2));
        entity.setSenderUserId(cursor.getInt(offset + 3));
        entity.setReceiverUserId(cursor.getInt(offset + 4));
        entity.setSenderPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReceiverPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContentJsonBody(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSend_flag(cursor.getInt(offset + 8));
        entity.setIsRightUI(cursor.getInt(offset + 9));
        entity.setIs_read(cursor.getInt(offset + 10));
        entity.setMsgId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CacheMsgBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CacheMsgBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CacheMsgBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
