package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.Card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD".
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContactID = new Property(1, long.class, "contactID", false, "CONTACT_ID");
        public final static Property Info = new Property(2, String.class, "info", false, "INFO");
        public final static Property Picture = new Property(3, String.class, "picture", false, "PICTURE");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Latitude = new Property(5, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(6, double.class, "longitude", false, "LONGITUDE");
        public final static Property Mapview = new Property(7, String.class, "mapview", false, "MAPVIEW");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
        public final static Property Data1 = new Property(9, String.class, "data1", false, "DATA1");
        public final static Property Data2 = new Property(10, String.class, "data2", false, "DATA2");
        public final static Property Data3 = new Property(11, String.class, "data3", false, "DATA3");
    }


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONTACT_ID\" INTEGER NOT NULL ," + // 1: contactID
                "\"INFO\" TEXT," + // 2: info
                "\"PICTURE\" TEXT," + // 3: picture
                "\"ADDRESS\" TEXT," + // 4: address
                "\"LATITUDE\" REAL NOT NULL ," + // 5: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 6: longitude
                "\"MAPVIEW\" TEXT," + // 7: mapview
                "\"TIME\" TEXT," + // 8: time
                "\"DATA1\" TEXT," + // 9: data1
                "\"DATA2\" TEXT," + // 10: data2
                "\"DATA3\" TEXT);"); // 11: data3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getContactID());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(3, info);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(4, picture);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindDouble(7, entity.getLongitude());
 
        String mapview = entity.getMapview();
        if (mapview != null) {
            stmt.bindString(8, mapview);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(10, data1);
        }
 
        String data2 = entity.getData2();
        if (data2 != null) {
            stmt.bindString(11, data2);
        }
 
        String data3 = entity.getData3();
        if (data3 != null) {
            stmt.bindString(12, data3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getContactID());
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(3, info);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(4, picture);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindDouble(7, entity.getLongitude());
 
        String mapview = entity.getMapview();
        if (mapview != null) {
            stmt.bindString(8, mapview);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String data1 = entity.getData1();
        if (data1 != null) {
            stmt.bindString(10, data1);
        }
 
        String data2 = entity.getData2();
        if (data2 != null) {
            stmt.bindString(11, data2);
        }
 
        String data3 = entity.getData3();
        if (data3 != null) {
            stmt.bindString(12, data3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // contactID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // info
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // picture
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.getDouble(offset + 5), // latitude
            cursor.getDouble(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mapview
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // data1
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // data2
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // data3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContactID(cursor.getLong(offset + 1));
        entity.setInfo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicture(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatitude(cursor.getDouble(offset + 5));
        entity.setLongitude(cursor.getDouble(offset + 6));
        entity.setMapview(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setData1(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setData2(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setData3(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Card entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
