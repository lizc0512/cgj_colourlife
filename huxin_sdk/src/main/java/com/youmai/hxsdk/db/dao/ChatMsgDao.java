package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.ChatMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MSG".
*/
public class ChatMsgDao extends AbstractDao<ChatMsg, Long> {

    public static final String TABLENAME = "CHAT_MSG";

    /**
     * Properties of entity ChatMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgTime = new Property(1, long.class, "msgTime", false, "MSG_TIME");
        public final static Property MsgId = new Property(2, long.class, "msgId", false, "MSG_ID");
        public final static Property SrcName = new Property(3, String.class, "srcName", false, "SRC_NAME");
        public final static Property SrcPhone = new Property(4, String.class, "srcPhone", false, "SRC_PHONE");
        public final static Property SrcUserType = new Property(5, int.class, "srcUserType", false, "SRC_USER_TYPE");
        public final static Property SrcUsrId = new Property(6, int.class, "srcUsrId", false, "SRC_USR_ID");
        public final static Property TargetName = new Property(7, String.class, "targetName", false, "TARGET_NAME");
        public final static Property TargetPhone = new Property(8, String.class, "targetPhone", false, "TARGET_PHONE");
        public final static Property TargetUserType = new Property(9, int.class, "targetUserType", false, "TARGET_USER_TYPE");
        public final static Property TargetUserId = new Property(10, int.class, "targetUserId", false, "TARGET_USER_ID");
        public final static Property JsonBoby = new Property(11, String.class, "jsonBoby", false, "JSON_BOBY");
        public final static Property ContentType = new Property(12, int.class, "contentType", false, "CONTENT_TYPE");
        public final static Property IsShow = new Property(13, boolean.class, "isShow", false, "IS_SHOW");
        public final static Property Fid = new Property(14, String.class, "fid", false, "FID");
        public final static Property Mphone = new Property(15, String.class, "mphone", false, "MPHONE");
        public final static Property Detailurl = new Property(16, String.class, "detailurl", false, "DETAILURL");
        public final static Property Type = new Property(17, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(18, String.class, "name", false, "NAME");
        public final static Property Nickname = new Property(19, String.class, "nickname", false, "NICKNAME");
        public final static Property Pfid = new Property(20, String.class, "pfid", false, "PFID");
        public final static Property File_type = new Property(21, String.class, "file_type", false, "FILE_TYPE");
    }


    public ChatMsgDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSG_TIME\" INTEGER NOT NULL ," + // 1: msgTime
                "\"MSG_ID\" INTEGER NOT NULL ," + // 2: msgId
                "\"SRC_NAME\" TEXT," + // 3: srcName
                "\"SRC_PHONE\" TEXT," + // 4: srcPhone
                "\"SRC_USER_TYPE\" INTEGER NOT NULL ," + // 5: srcUserType
                "\"SRC_USR_ID\" INTEGER NOT NULL ," + // 6: srcUsrId
                "\"TARGET_NAME\" TEXT," + // 7: targetName
                "\"TARGET_PHONE\" TEXT," + // 8: targetPhone
                "\"TARGET_USER_TYPE\" INTEGER NOT NULL ," + // 9: targetUserType
                "\"TARGET_USER_ID\" INTEGER NOT NULL ," + // 10: targetUserId
                "\"JSON_BOBY\" TEXT," + // 11: jsonBoby
                "\"CONTENT_TYPE\" INTEGER NOT NULL ," + // 12: contentType
                "\"IS_SHOW\" INTEGER NOT NULL ," + // 13: isShow
                "\"FID\" TEXT," + // 14: fid
                "\"MPHONE\" TEXT," + // 15: mphone
                "\"DETAILURL\" TEXT," + // 16: detailurl
                "\"TYPE\" TEXT," + // 17: type
                "\"NAME\" TEXT," + // 18: name
                "\"NICKNAME\" TEXT," + // 19: nickname
                "\"PFID\" TEXT," + // 20: pfid
                "\"FILE_TYPE\" TEXT);"); // 21: file_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgTime());
        stmt.bindLong(3, entity.getMsgId());
 
        String srcName = entity.getSrcName();
        if (srcName != null) {
            stmt.bindString(4, srcName);
        }
 
        String srcPhone = entity.getSrcPhone();
        if (srcPhone != null) {
            stmt.bindString(5, srcPhone);
        }
        stmt.bindLong(6, entity.getSrcUserType());
        stmt.bindLong(7, entity.getSrcUsrId());
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(8, targetName);
        }
 
        String targetPhone = entity.getTargetPhone();
        if (targetPhone != null) {
            stmt.bindString(9, targetPhone);
        }
        stmt.bindLong(10, entity.getTargetUserType());
        stmt.bindLong(11, entity.getTargetUserId());
 
        String jsonBoby = entity.getJsonBoby();
        if (jsonBoby != null) {
            stmt.bindString(12, jsonBoby);
        }
        stmt.bindLong(13, entity.getContentType());
        stmt.bindLong(14, entity.getIsShow() ? 1L: 0L);
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(15, fid);
        }
 
        String mphone = entity.getMphone();
        if (mphone != null) {
            stmt.bindString(16, mphone);
        }
 
        String detailurl = entity.getDetailurl();
        if (detailurl != null) {
            stmt.bindString(17, detailurl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(18, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(19, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(20, nickname);
        }
 
        String pfid = entity.getPfid();
        if (pfid != null) {
            stmt.bindString(21, pfid);
        }
 
        String file_type = entity.getFile_type();
        if (file_type != null) {
            stmt.bindString(22, file_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMsgTime());
        stmt.bindLong(3, entity.getMsgId());
 
        String srcName = entity.getSrcName();
        if (srcName != null) {
            stmt.bindString(4, srcName);
        }
 
        String srcPhone = entity.getSrcPhone();
        if (srcPhone != null) {
            stmt.bindString(5, srcPhone);
        }
        stmt.bindLong(6, entity.getSrcUserType());
        stmt.bindLong(7, entity.getSrcUsrId());
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(8, targetName);
        }
 
        String targetPhone = entity.getTargetPhone();
        if (targetPhone != null) {
            stmt.bindString(9, targetPhone);
        }
        stmt.bindLong(10, entity.getTargetUserType());
        stmt.bindLong(11, entity.getTargetUserId());
 
        String jsonBoby = entity.getJsonBoby();
        if (jsonBoby != null) {
            stmt.bindString(12, jsonBoby);
        }
        stmt.bindLong(13, entity.getContentType());
        stmt.bindLong(14, entity.getIsShow() ? 1L: 0L);
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(15, fid);
        }
 
        String mphone = entity.getMphone();
        if (mphone != null) {
            stmt.bindString(16, mphone);
        }
 
        String detailurl = entity.getDetailurl();
        if (detailurl != null) {
            stmt.bindString(17, detailurl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(18, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(19, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(20, nickname);
        }
 
        String pfid = entity.getPfid();
        if (pfid != null) {
            stmt.bindString(21, pfid);
        }
 
        String file_type = entity.getFile_type();
        if (file_type != null) {
            stmt.bindString(22, file_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMsg readEntity(Cursor cursor, int offset) {
        ChatMsg entity = new ChatMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // msgTime
            cursor.getLong(offset + 2), // msgId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // srcName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // srcPhone
            cursor.getInt(offset + 5), // srcUserType
            cursor.getInt(offset + 6), // srcUsrId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // targetName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // targetPhone
            cursor.getInt(offset + 9), // targetUserType
            cursor.getInt(offset + 10), // targetUserId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // jsonBoby
            cursor.getInt(offset + 12), // contentType
            cursor.getShort(offset + 13) != 0, // isShow
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // fid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mphone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // detailurl
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // type
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // name
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // nickname
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // pfid
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // file_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgTime(cursor.getLong(offset + 1));
        entity.setMsgId(cursor.getLong(offset + 2));
        entity.setSrcName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSrcPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSrcUserType(cursor.getInt(offset + 5));
        entity.setSrcUsrId(cursor.getInt(offset + 6));
        entity.setTargetName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTargetPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTargetUserType(cursor.getInt(offset + 9));
        entity.setTargetUserId(cursor.getInt(offset + 10));
        entity.setJsonBoby(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContentType(cursor.getInt(offset + 12));
        entity.setIsShow(cursor.getShort(offset + 13) != 0);
        entity.setFid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMphone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDetailurl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNickname(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPfid(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFile_type(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMsg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
