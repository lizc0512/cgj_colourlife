package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT".
*/
public class ContactDao extends AbstractDao<Contact, Integer> {

    public static final String TABLENAME = "CONTACT";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ContactId = new Property(0, int.class, "contactId", true, "CONTACT_ID");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Nick_name = new Property(3, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Sex = new Property(5, int.class, "sex", false, "SEX");
        public final static Property Sign = new Property(6, String.class, "sign", false, "SIGN");
        public final static Property Is_hx = new Property(7, boolean.class, "is_hx", false, "IS_HX");
        public final static Property Pinyin = new Property(8, String.class, "pinyin", false, "PINYIN");
        public final static Property SimplePinyin = new Property(9, String.class, "simplePinyin", false, "SIMPLE_PINYIN");
        public final static Property Type = new Property(10, String.class, "type", false, "TYPE");
        public final static Property Username = new Property(11, String.class, "username", false, "USERNAME");
    }


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT\" (" + //
                "\"CONTACT_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: contactId
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"PHONE\" TEXT," + // 2: phone
                "\"NICK_NAME\" TEXT," + // 3: nick_name
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"SIGN\" TEXT," + // 6: sign
                "\"IS_HX\" INTEGER NOT NULL ," + // 7: is_hx
                "\"PINYIN\" TEXT," + // 8: pinyin
                "\"SIMPLE_PINYIN\" TEXT," + // 9: simplePinyin
                "\"TYPE\" TEXT," + // 10: type
                "\"USERNAME\" TEXT);"); // 11: username
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contact entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getContactId());
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getSex());
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(7, sign);
        }
        stmt.bindLong(8, entity.getIs_hx() ? 1L: 0L);
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(9, pinyin);
        }
 
        String simplePinyin = entity.getSimplePinyin();
        if (simplePinyin != null) {
            stmt.bindString(10, simplePinyin);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(12, username);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getContactId());
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(4, nick_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getSex());
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(7, sign);
        }
        stmt.bindLong(8, entity.getIs_hx() ? 1L: 0L);
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(9, pinyin);
        }
 
        String simplePinyin = entity.getSimplePinyin();
        if (simplePinyin != null) {
            stmt.bindString(10, simplePinyin);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(11, type);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(12, username);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.getInt(offset + 0), // contactId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nick_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.getInt(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sign
            cursor.getShort(offset + 7) != 0, // is_hx
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pinyin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // simplePinyin
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // username
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setContactId(cursor.getInt(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNick_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.getInt(offset + 5));
        entity.setSign(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_hx(cursor.getShort(offset + 7) != 0);
        entity.setPinyin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSimplePinyin(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUsername(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Contact entity, long rowId) {
        return entity.getContactId();
    }
    
    @Override
    public Integer getKey(Contact entity) {
        if(entity != null) {
            return entity.getContactId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contact entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
