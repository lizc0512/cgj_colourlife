package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.EmployeeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLOYEE_BEAN".
*/
public class EmployeeBeanDao extends AbstractDao<EmployeeBean, Long> {

    public static final String TABLENAME = "EMPLOYEE_BEAN";

    /**
     * Properties of entity EmployeeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property Mobile = new Property(2, String.class, "mobile", false, "MOBILE");
        public final static Property Realname = new Property(3, String.class, "realname", false, "REALNAME");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property IsFavorite = new Property(7, String.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property JobName = new Property(8, String.class, "jobName", false, "JOB_NAME");
        public final static Property Landline = new Property(9, String.class, "landline", false, "LANDLINE");
        public final static Property OrgID = new Property(10, String.class, "orgID", false, "ORG_ID");
        public final static Property OrgName = new Property(11, String.class, "orgName", false, "ORG_NAME");
        public final static Property Username = new Property(12, String.class, "username", false, "USERNAME");
        public final static Property Enterprise_cornet = new Property(13, String.class, "enterprise_cornet", false, "ENTERPRISE_CORNET");
    }


    public EmployeeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLOYEE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UID\" TEXT," + // 1: uid
                "\"MOBILE\" TEXT," + // 2: mobile
                "\"REALNAME\" TEXT," + // 3: realname
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"SEX\" TEXT," + // 5: sex
                "\"EMAIL\" TEXT," + // 6: email
                "\"IS_FAVORITE\" TEXT," + // 7: isFavorite
                "\"JOB_NAME\" TEXT," + // 8: jobName
                "\"LANDLINE\" TEXT," + // 9: landline
                "\"ORG_ID\" TEXT," + // 10: orgID
                "\"ORG_NAME\" TEXT," + // 11: orgName
                "\"USERNAME\" TEXT," + // 12: username
                "\"ENTERPRISE_CORNET\" TEXT);"); // 13: enterprise_cornet
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLOYEE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmployeeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(4, realname);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindString(8, isFavorite);
        }
 
        String jobName = entity.getJobName();
        if (jobName != null) {
            stmt.bindString(9, jobName);
        }
 
        String landline = entity.getLandline();
        if (landline != null) {
            stmt.bindString(10, landline);
        }
 
        String orgID = entity.getOrgID();
        if (orgID != null) {
            stmt.bindString(11, orgID);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(12, orgName);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(13, username);
        }
 
        String enterprise_cornet = entity.getEnterprise_cornet();
        if (enterprise_cornet != null) {
            stmt.bindString(14, enterprise_cornet);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmployeeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(4, realname);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String isFavorite = entity.getIsFavorite();
        if (isFavorite != null) {
            stmt.bindString(8, isFavorite);
        }
 
        String jobName = entity.getJobName();
        if (jobName != null) {
            stmt.bindString(9, jobName);
        }
 
        String landline = entity.getLandline();
        if (landline != null) {
            stmt.bindString(10, landline);
        }
 
        String orgID = entity.getOrgID();
        if (orgID != null) {
            stmt.bindString(11, orgID);
        }
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(12, orgName);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(13, username);
        }
 
        String enterprise_cornet = entity.getEnterprise_cornet();
        if (enterprise_cornet != null) {
            stmt.bindString(14, enterprise_cornet);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EmployeeBean readEntity(Cursor cursor, int offset) {
        EmployeeBean entity = new EmployeeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isFavorite
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // jobName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // landline
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // orgID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // orgName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // username
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // enterprise_cornet
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmployeeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRealname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsFavorite(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJobName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLandline(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrgID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrgName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUsername(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEnterprise_cornet(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmployeeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmployeeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmployeeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
