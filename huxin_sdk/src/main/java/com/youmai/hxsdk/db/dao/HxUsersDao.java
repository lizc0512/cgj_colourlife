package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.HxUsers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HX_USERS".
*/
public class HxUsersDao extends AbstractDao<HxUsers, Long> {

    public static final String TABLENAME = "HX_USERS";

    /**
     * Properties of entity HxUsers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Nname = new Property(3, String.class, "nname", false, "NNAME");
        public final static Property Msisdn = new Property(4, String.class, "msisdn", false, "MSISDN");
        public final static Property IconUrl = new Property(5, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Version = new Property(7, String.class, "version", false, "VERSION");
        public final static Property ShowType = new Property(8, String.class, "showType", false, "SHOW_TYPE");
    }


    public HxUsersDao(DaoConfig config) {
        super(config);
    }
    
    public HxUsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HX_USERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"SEX\" TEXT," + // 2: sex
                "\"NNAME\" TEXT," + // 3: nname
                "\"MSISDN\" TEXT," + // 4: msisdn
                "\"ICON_URL\" TEXT," + // 5: iconUrl
                "\"TYPE\" TEXT," + // 6: type
                "\"VERSION\" TEXT," + // 7: version
                "\"SHOW_TYPE\" TEXT);"); // 8: showType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HX_USERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HxUsers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String nname = entity.getNname();
        if (nname != null) {
            stmt.bindString(4, nname);
        }
 
        String msisdn = entity.getMsisdn();
        if (msisdn != null) {
            stmt.bindString(5, msisdn);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(6, iconUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(8, version);
        }
 
        String showType = entity.getShowType();
        if (showType != null) {
            stmt.bindString(9, showType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HxUsers entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String nname = entity.getNname();
        if (nname != null) {
            stmt.bindString(4, nname);
        }
 
        String msisdn = entity.getMsisdn();
        if (msisdn != null) {
            stmt.bindString(5, msisdn);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(6, iconUrl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(8, version);
        }
 
        String showType = entity.getShowType();
        if (showType != null) {
            stmt.bindString(9, showType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HxUsers readEntity(Cursor cursor, int offset) {
        HxUsers entity = new HxUsers( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // msisdn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // iconUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // version
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // showType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HxUsers entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMsisdn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIconUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVersion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShowType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HxUsers entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HxUsers entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HxUsers entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
