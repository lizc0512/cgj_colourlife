package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.ImCardModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IM_CARD_MODEL".
*/
public class ImCardModelDao extends AbstractDao<ImCardModel, Long> {

    public static final String TABLENAME = "IM_CARD_MODEL";

    /**
     * Properties of entity ImCardModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CardId = new Property(0, Long.class, "cardId", true, "_id");
        public final static Property PhoneNumber = new Property(1, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property CardTime = new Property(2, long.class, "cardTime", false, "CARD_TIME");
        public final static Property CardHeadId = new Property(3, long.class, "cardHeadId", false, "CARD_HEAD_ID");
        public final static Property CardTailId = new Property(4, long.class, "cardTailId", false, "CARD_TAIL_ID");
        public final static Property CardTheme = new Property(5, String.class, "cardTheme", false, "CARD_THEME");
        public final static Property CardRemark = new Property(6, String.class, "cardRemark", false, "CARD_REMARK");
    }


    public ImCardModelDao(DaoConfig config) {
        super(config);
    }
    
    public ImCardModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IM_CARD_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: cardId
                "\"PHONE_NUMBER\" TEXT," + // 1: phoneNumber
                "\"CARD_TIME\" INTEGER NOT NULL ," + // 2: cardTime
                "\"CARD_HEAD_ID\" INTEGER NOT NULL ," + // 3: cardHeadId
                "\"CARD_TAIL_ID\" INTEGER NOT NULL ," + // 4: cardTailId
                "\"CARD_THEME\" TEXT," + // 5: cardTheme
                "\"CARD_REMARK\" TEXT);"); // 6: cardRemark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IM_CARD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ImCardModel entity) {
        stmt.clearBindings();
 
        Long cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindLong(1, cardId);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
        stmt.bindLong(3, entity.getCardTime());
        stmt.bindLong(4, entity.getCardHeadId());
        stmt.bindLong(5, entity.getCardTailId());
 
        String cardTheme = entity.getCardTheme();
        if (cardTheme != null) {
            stmt.bindString(6, cardTheme);
        }
 
        String cardRemark = entity.getCardRemark();
        if (cardRemark != null) {
            stmt.bindString(7, cardRemark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ImCardModel entity) {
        stmt.clearBindings();
 
        Long cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindLong(1, cardId);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
        stmt.bindLong(3, entity.getCardTime());
        stmt.bindLong(4, entity.getCardHeadId());
        stmt.bindLong(5, entity.getCardTailId());
 
        String cardTheme = entity.getCardTheme();
        if (cardTheme != null) {
            stmt.bindString(6, cardTheme);
        }
 
        String cardRemark = entity.getCardRemark();
        if (cardRemark != null) {
            stmt.bindString(7, cardRemark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ImCardModel readEntity(Cursor cursor, int offset) {
        ImCardModel entity = new ImCardModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cardId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phoneNumber
            cursor.getLong(offset + 2), // cardTime
            cursor.getLong(offset + 3), // cardHeadId
            cursor.getLong(offset + 4), // cardTailId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cardTheme
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // cardRemark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ImCardModel entity, int offset) {
        entity.setCardId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoneNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardTime(cursor.getLong(offset + 2));
        entity.setCardHeadId(cursor.getLong(offset + 3));
        entity.setCardTailId(cursor.getLong(offset + 4));
        entity.setCardTheme(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCardRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ImCardModel entity, long rowId) {
        entity.setCardId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ImCardModel entity) {
        if(entity != null) {
            return entity.getCardId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ImCardModel entity) {
        return entity.getCardId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
