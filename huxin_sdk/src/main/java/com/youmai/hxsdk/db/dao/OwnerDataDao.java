package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.OwnerData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OWNER_DATA".
*/
public class OwnerDataDao extends AbstractDao<OwnerData, Long> {

    public static final String TABLENAME = "OWNER_DATA";

    /**
     * Properties of entity OwnerData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msisdn = new Property(1, String.class, "msisdn", false, "MSISDN");
        public final static Property Vname = new Property(2, String.class, "vname", false, "VNAME");
        public final static Property Smallarea_name = new Property(3, String.class, "smallarea_name", false, "SMALLAREA_NAME");
        public final static Property Housetype_name = new Property(4, String.class, "housetype_name", false, "HOUSETYPE_NAME");
        public final static Property Unit_name = new Property(5, String.class, "unit_name", false, "UNIT_NAME");
        public final static Property Roomno = new Property(6, String.class, "roomno", false, "ROOMNO");
        public final static Property Bool_ower = new Property(7, int.class, "bool_ower", false, "BOOL_OWER");
    }


    public OwnerDataDao(DaoConfig config) {
        super(config);
    }
    
    public OwnerDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OWNER_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSISDN\" TEXT," + // 1: msisdn
                "\"VNAME\" TEXT," + // 2: vname
                "\"SMALLAREA_NAME\" TEXT," + // 3: smallarea_name
                "\"HOUSETYPE_NAME\" TEXT," + // 4: housetype_name
                "\"UNIT_NAME\" TEXT," + // 5: unit_name
                "\"ROOMNO\" TEXT," + // 6: roomno
                "\"BOOL_OWER\" INTEGER NOT NULL );"); // 7: bool_ower
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OWNER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OwnerData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msisdn = entity.getMsisdn();
        if (msisdn != null) {
            stmt.bindString(2, msisdn);
        }
 
        String vname = entity.getVname();
        if (vname != null) {
            stmt.bindString(3, vname);
        }
 
        String smallarea_name = entity.getSmallarea_name();
        if (smallarea_name != null) {
            stmt.bindString(4, smallarea_name);
        }
 
        String housetype_name = entity.getHousetype_name();
        if (housetype_name != null) {
            stmt.bindString(5, housetype_name);
        }
 
        String unit_name = entity.getUnit_name();
        if (unit_name != null) {
            stmt.bindString(6, unit_name);
        }
 
        String roomno = entity.getRoomno();
        if (roomno != null) {
            stmt.bindString(7, roomno);
        }
        stmt.bindLong(8, entity.getBool_ower());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OwnerData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msisdn = entity.getMsisdn();
        if (msisdn != null) {
            stmt.bindString(2, msisdn);
        }
 
        String vname = entity.getVname();
        if (vname != null) {
            stmt.bindString(3, vname);
        }
 
        String smallarea_name = entity.getSmallarea_name();
        if (smallarea_name != null) {
            stmt.bindString(4, smallarea_name);
        }
 
        String housetype_name = entity.getHousetype_name();
        if (housetype_name != null) {
            stmt.bindString(5, housetype_name);
        }
 
        String unit_name = entity.getUnit_name();
        if (unit_name != null) {
            stmt.bindString(6, unit_name);
        }
 
        String roomno = entity.getRoomno();
        if (roomno != null) {
            stmt.bindString(7, roomno);
        }
        stmt.bindLong(8, entity.getBool_ower());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OwnerData readEntity(Cursor cursor, int offset) {
        OwnerData entity = new OwnerData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msisdn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // smallarea_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // housetype_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // roomno
            cursor.getInt(offset + 7) // bool_ower
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OwnerData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsisdn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSmallarea_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHousetype_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRoomno(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBool_ower(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OwnerData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OwnerData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OwnerData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
