package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.RemindMsg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMIND_MSG".
*/
public class RemindMsgDao extends AbstractDao<RemindMsg, Long> {

    public static final String TABLENAME = "REMIND_MSG";

    /**
     * Properties of entity RemindMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RemindId = new Property(1, int.class, "remindId", false, "REMIND_ID");
        public final static Property MsgId = new Property(2, Long.class, "msgId", false, "MSG_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Remark = new Property(4, String.class, "remark", false, "REMARK");
        public final static Property MsgType = new Property(5, int.class, "msgType", false, "MSG_TYPE");
        public final static Property MsgIcon = new Property(6, int.class, "msgIcon", false, "MSG_ICON");
        public final static Property RemindTime = new Property(7, long.class, "remindTime", false, "REMIND_TIME");
        public final static Property SendPhone = new Property(8, String.class, "sendPhone", false, "SEND_PHONE");
        public final static Property ReceivePhone = new Property(9, String.class, "receivePhone", false, "RECEIVE_PHONE");
        public final static Property CreateTime = new Property(10, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Fids = new Property(11, String.class, "fids", false, "FIDS");
        public final static Property RecTime = new Property(12, long.class, "recTime", false, "REC_TIME");
        public final static Property IsRead = new Property(13, boolean.class, "isRead", false, "IS_READ");
        public final static Property QuickPhone = new Property(14, String.class, "quickPhone", false, "QUICK_PHONE");
    }


    public RemindMsgDao(DaoConfig config) {
        super(config);
    }
    
    public RemindMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMIND_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REMIND_ID\" INTEGER NOT NULL ," + // 1: remindId
                "\"MSG_ID\" INTEGER," + // 2: msgId
                "\"TITLE\" TEXT," + // 3: title
                "\"REMARK\" TEXT," + // 4: remark
                "\"MSG_TYPE\" INTEGER NOT NULL ," + // 5: msgType
                "\"MSG_ICON\" INTEGER NOT NULL ," + // 6: msgIcon
                "\"REMIND_TIME\" INTEGER NOT NULL ," + // 7: remindTime
                "\"SEND_PHONE\" TEXT," + // 8: sendPhone
                "\"RECEIVE_PHONE\" TEXT," + // 9: receivePhone
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 10: createTime
                "\"FIDS\" TEXT," + // 11: fids
                "\"REC_TIME\" INTEGER NOT NULL ," + // 12: recTime
                "\"IS_READ\" INTEGER NOT NULL ," + // 13: isRead
                "\"QUICK_PHONE\" TEXT);"); // 14: quickPhone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMIND_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemindMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemindId());
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(3, msgId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
        stmt.bindLong(6, entity.getMsgType());
        stmt.bindLong(7, entity.getMsgIcon());
        stmt.bindLong(8, entity.getRemindTime());
 
        String sendPhone = entity.getSendPhone();
        if (sendPhone != null) {
            stmt.bindString(9, sendPhone);
        }
 
        String receivePhone = entity.getReceivePhone();
        if (receivePhone != null) {
            stmt.bindString(10, receivePhone);
        }
        stmt.bindLong(11, entity.getCreateTime());
 
        String fids = entity.getFids();
        if (fids != null) {
            stmt.bindString(12, fids);
        }
        stmt.bindLong(13, entity.getRecTime());
        stmt.bindLong(14, entity.getIsRead() ? 1L: 0L);
 
        String quickPhone = entity.getQuickPhone();
        if (quickPhone != null) {
            stmt.bindString(15, quickPhone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemindMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemindId());
 
        Long msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindLong(3, msgId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
        stmt.bindLong(6, entity.getMsgType());
        stmt.bindLong(7, entity.getMsgIcon());
        stmt.bindLong(8, entity.getRemindTime());
 
        String sendPhone = entity.getSendPhone();
        if (sendPhone != null) {
            stmt.bindString(9, sendPhone);
        }
 
        String receivePhone = entity.getReceivePhone();
        if (receivePhone != null) {
            stmt.bindString(10, receivePhone);
        }
        stmt.bindLong(11, entity.getCreateTime());
 
        String fids = entity.getFids();
        if (fids != null) {
            stmt.bindString(12, fids);
        }
        stmt.bindLong(13, entity.getRecTime());
        stmt.bindLong(14, entity.getIsRead() ? 1L: 0L);
 
        String quickPhone = entity.getQuickPhone();
        if (quickPhone != null) {
            stmt.bindString(15, quickPhone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RemindMsg readEntity(Cursor cursor, int offset) {
        RemindMsg entity = new RemindMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // remindId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // msgId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remark
            cursor.getInt(offset + 5), // msgType
            cursor.getInt(offset + 6), // msgIcon
            cursor.getLong(offset + 7), // remindTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sendPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // receivePhone
            cursor.getLong(offset + 10), // createTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fids
            cursor.getLong(offset + 12), // recTime
            cursor.getShort(offset + 13) != 0, // isRead
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // quickPhone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemindMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemindId(cursor.getInt(offset + 1));
        entity.setMsgId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMsgType(cursor.getInt(offset + 5));
        entity.setMsgIcon(cursor.getInt(offset + 6));
        entity.setRemindTime(cursor.getLong(offset + 7));
        entity.setSendPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReceivePhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTime(cursor.getLong(offset + 10));
        entity.setFids(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRecTime(cursor.getLong(offset + 12));
        entity.setIsRead(cursor.getShort(offset + 13) != 0);
        entity.setQuickPhone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RemindMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RemindMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RemindMsg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
