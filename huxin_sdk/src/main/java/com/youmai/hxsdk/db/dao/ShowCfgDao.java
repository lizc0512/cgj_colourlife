package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.ShowCfg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOW_CFG".
*/
public class ShowCfgDao extends AbstractDao<ShowCfg, Long> {

    public static final String TABLENAME = "SHOW_CFG";

    /**
     * Properties of entity ShowCfg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Table_id = new Property(0, Long.class, "table_id", true, "_id");
        public final static Property Version = new Property(1, String.class, "version", false, "VERSION");
        public final static Property Interval = new Property(2, int.class, "interval", false, "INTERVAL");
        public final static Property Unit = new Property(3, int.class, "unit", false, "UNIT");
        public final static Property Limits = new Property(4, int.class, "limits", false, "LIMITS");
    }


    public ShowCfgDao(DaoConfig config) {
        super(config);
    }
    
    public ShowCfgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOW_CFG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: table_id
                "\"VERSION\" TEXT," + // 1: version
                "\"INTERVAL\" INTEGER NOT NULL ," + // 2: interval
                "\"UNIT\" INTEGER NOT NULL ," + // 3: unit
                "\"LIMITS\" INTEGER NOT NULL );"); // 4: limits
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOW_CFG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShowCfg entity) {
        stmt.clearBindings();
 
        Long table_id = entity.getTable_id();
        if (table_id != null) {
            stmt.bindLong(1, table_id);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
        stmt.bindLong(3, entity.getInterval());
        stmt.bindLong(4, entity.getUnit());
        stmt.bindLong(5, entity.getLimits());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShowCfg entity) {
        stmt.clearBindings();
 
        Long table_id = entity.getTable_id();
        if (table_id != null) {
            stmt.bindLong(1, table_id);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
        stmt.bindLong(3, entity.getInterval());
        stmt.bindLong(4, entity.getUnit());
        stmt.bindLong(5, entity.getLimits());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShowCfg readEntity(Cursor cursor, int offset) {
        ShowCfg entity = new ShowCfg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // table_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // version
            cursor.getInt(offset + 2), // interval
            cursor.getInt(offset + 3), // unit
            cursor.getInt(offset + 4) // limits
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShowCfg entity, int offset) {
        entity.setTable_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInterval(cursor.getInt(offset + 2));
        entity.setUnit(cursor.getInt(offset + 3));
        entity.setLimits(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShowCfg entity, long rowId) {
        entity.setTable_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShowCfg entity) {
        if(entity != null) {
            return entity.getTable_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShowCfg entity) {
        return entity.getTable_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
