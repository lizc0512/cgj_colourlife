package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.ShowData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOW_DATA".
*/
public class ShowDataDao extends AbstractDao<ShowData, Long> {

    public static final String TABLENAME = "SHOW_DATA";

    /**
     * Properties of entity ShowData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Version = new Property(1, String.class, "version", false, "VERSION");
        public final static Property Msisdn = new Property(2, String.class, "msisdn", false, "MSISDN");
        public final static Property Mphone = new Property(3, String.class, "mphone", false, "MPHONE");
        public final static Property Fid = new Property(4, String.class, "fid", false, "FID");
        public final static Property Pfid = new Property(5, String.class, "pfid", false, "PFID");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Vtime = new Property(7, String.class, "vtime", false, "VTIME");
        public final static Property Detailurl = new Property(8, String.class, "detailurl", false, "DETAILURL");
        public final static Property Type = new Property(9, String.class, "type", false, "TYPE");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
        public final static Property File_type = new Property(11, String.class, "file_type", false, "FILE_TYPE");
    }


    public ShowDataDao(DaoConfig config) {
        super(config);
    }
    
    public ShowDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOW_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VERSION\" TEXT," + // 1: version
                "\"MSISDN\" TEXT," + // 2: msisdn
                "\"MPHONE\" TEXT," + // 3: mphone
                "\"FID\" TEXT," + // 4: fid
                "\"PFID\" TEXT," + // 5: pfid
                "\"TITLE\" TEXT," + // 6: title
                "\"VTIME\" TEXT," + // 7: vtime
                "\"DETAILURL\" TEXT," + // 8: detailurl
                "\"TYPE\" TEXT," + // 9: type
                "\"NAME\" TEXT," + // 10: name
                "\"FILE_TYPE\" TEXT);"); // 11: file_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOW_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShowData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
 
        String msisdn = entity.getMsisdn();
        if (msisdn != null) {
            stmt.bindString(3, msisdn);
        }
 
        String mphone = entity.getMphone();
        if (mphone != null) {
            stmt.bindString(4, mphone);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String pfid = entity.getPfid();
        if (pfid != null) {
            stmt.bindString(6, pfid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String vtime = entity.getVtime();
        if (vtime != null) {
            stmt.bindString(8, vtime);
        }
 
        String detailurl = entity.getDetailurl();
        if (detailurl != null) {
            stmt.bindString(9, detailurl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String file_type = entity.getFile_type();
        if (file_type != null) {
            stmt.bindString(12, file_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShowData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(2, version);
        }
 
        String msisdn = entity.getMsisdn();
        if (msisdn != null) {
            stmt.bindString(3, msisdn);
        }
 
        String mphone = entity.getMphone();
        if (mphone != null) {
            stmt.bindString(4, mphone);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String pfid = entity.getPfid();
        if (pfid != null) {
            stmt.bindString(6, pfid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String vtime = entity.getVtime();
        if (vtime != null) {
            stmt.bindString(8, vtime);
        }
 
        String detailurl = entity.getDetailurl();
        if (detailurl != null) {
            stmt.bindString(9, detailurl);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
 
        String file_type = entity.getFile_type();
        if (file_type != null) {
            stmt.bindString(12, file_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShowData readEntity(Cursor cursor, int offset) {
        ShowData entity = new ShowData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // version
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msisdn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mphone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pfid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vtime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // detailurl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // file_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShowData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsisdn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMphone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPfid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVtime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDetailurl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFile_type(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShowData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShowData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShowData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
