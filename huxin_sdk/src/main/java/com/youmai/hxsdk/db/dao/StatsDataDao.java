package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.StatsData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATS_DATA".
*/
public class StatsDataDao extends AbstractDao<StatsData, Long> {

    public static final String TABLENAME = "STATS_DATA";

    /**
     * Properties of entity StatsData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Table_id = new Property(0, Long.class, "table_id", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property IsSend = new Property(4, int.class, "isSend", false, "IS_SEND");
        public final static Property EventResult = new Property(5, int.class, "eventResult", false, "EVENT_RESULT");
        public final static Property RefDataId = new Property(6, int.class, "refDataId", false, "REF_DATA_ID");
        public final static Property CustomContent = new Property(7, String.class, "customContent", false, "CUSTOM_CONTENT");
    }


    public StatsDataDao(DaoConfig config) {
        super(config);
    }
    
    public StatsDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATS_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: table_id
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"URL\" TEXT," + // 3: url
                "\"IS_SEND\" INTEGER NOT NULL ," + // 4: isSend
                "\"EVENT_RESULT\" INTEGER NOT NULL ," + // 5: eventResult
                "\"REF_DATA_ID\" INTEGER NOT NULL ," + // 6: refDataId
                "\"CUSTOM_CONTENT\" TEXT);"); // 7: customContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StatsData entity) {
        stmt.clearBindings();
 
        Long table_id = entity.getTable_id();
        if (table_id != null) {
            stmt.bindLong(1, table_id);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getTime());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
        stmt.bindLong(5, entity.getIsSend());
        stmt.bindLong(6, entity.getEventResult());
        stmt.bindLong(7, entity.getRefDataId());
 
        String customContent = entity.getCustomContent();
        if (customContent != null) {
            stmt.bindString(8, customContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StatsData entity) {
        stmt.clearBindings();
 
        Long table_id = entity.getTable_id();
        if (table_id != null) {
            stmt.bindLong(1, table_id);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getTime());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
        stmt.bindLong(5, entity.getIsSend());
        stmt.bindLong(6, entity.getEventResult());
        stmt.bindLong(7, entity.getRefDataId());
 
        String customContent = entity.getCustomContent();
        if (customContent != null) {
            stmt.bindString(8, customContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StatsData readEntity(Cursor cursor, int offset) {
        StatsData entity = new StatsData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // table_id
            cursor.getInt(offset + 1), // id
            cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.getInt(offset + 4), // isSend
            cursor.getInt(offset + 5), // eventResult
            cursor.getInt(offset + 6), // refDataId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // customContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StatsData entity, int offset) {
        entity.setTable_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsSend(cursor.getInt(offset + 4));
        entity.setEventResult(cursor.getInt(offset + 5));
        entity.setRefDataId(cursor.getInt(offset + 6));
        entity.setCustomContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StatsData entity, long rowId) {
        entity.setTable_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StatsData entity) {
        if(entity != null) {
            return entity.getTable_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StatsData entity) {
        return entity.getTable_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
