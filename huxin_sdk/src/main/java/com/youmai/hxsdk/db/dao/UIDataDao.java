package com.youmai.hxsdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.youmai.hxsdk.db.bean.UIData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UIDATA".
*/
public class UIDataDao extends AbstractDao<UIData, Long> {

    public static final String TABLENAME = "UIDATA";

    /**
     * Properties of entity UIData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msisdn = new Property(1, String.class, "msisdn", false, "MSISDN");
        public final static Property Mphone = new Property(2, String.class, "mphone", false, "MPHONE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Icon = new Property(4, String.class, "icon", false, "ICON");
        public final static Property Num = new Property(5, String.class, "num", false, "NUM");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property Data = new Property(7, String.class, "data", false, "DATA");
    }


    public UIDataDao(DaoConfig config) {
        super(config);
    }
    
    public UIDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UIDATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MSISDN\" TEXT," + // 1: msisdn
                "\"MPHONE\" TEXT," + // 2: mphone
                "\"NAME\" TEXT," + // 3: name
                "\"ICON\" TEXT," + // 4: icon
                "\"NUM\" TEXT," + // 5: num
                "\"TYPE\" TEXT," + // 6: type
                "\"DATA\" TEXT);"); // 7: data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UIDATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UIData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msisdn = entity.getMsisdn();
        if (msisdn != null) {
            stmt.bindString(2, msisdn);
        }
 
        String mphone = entity.getMphone();
        if (mphone != null) {
            stmt.bindString(3, mphone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(5, icon);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(8, data);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UIData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msisdn = entity.getMsisdn();
        if (msisdn != null) {
            stmt.bindString(2, msisdn);
        }
 
        String mphone = entity.getMphone();
        if (mphone != null) {
            stmt.bindString(3, mphone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(5, icon);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(6, num);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(8, data);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UIData readEntity(Cursor cursor, int offset) {
        UIData entity = new UIData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msisdn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mphone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // icon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // num
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UIData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsisdn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMphone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNum(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setData(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UIData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UIData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UIData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
