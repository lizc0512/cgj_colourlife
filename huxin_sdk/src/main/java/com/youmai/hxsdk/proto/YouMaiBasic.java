// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YouMai.Basic.proto

package com.youmai.hxsdk.proto;

public final class YouMaiBasic {
    private YouMaiBasic() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
    }

    /**
     * Protobuf enum {@code COMMANDID}
     */
    public enum COMMANDID
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>HEART_BEAT = 1;</code>
         */
        HEART_BEAT(0, 1),
        /**
         * <code>HEART_BEAT_ACK = 2;</code>
         */
        HEART_BEAT_ACK(1, 2),
        /**
         * <code>ROUTE_REQ = 20;</code>
         */
        ROUTE_REQ(2, 20),
        /**
         * <code>USER_LOGIN = 101;</code>
         */
        USER_LOGIN(3, 101),
        /**
         * <code>USER_LOGIN_ACK = 102;</code>
         */
        USER_LOGIN_ACK(4, 102),
        /**
         * <code>USER_LOGOFF = 103;</code>
         */
        USER_LOGOFF(5, 103),
        /**
         * <code>USER_LOGOFF_ACK = 104;</code>
         */
        USER_LOGOFF_ACK(6, 104),
        /**
         * <code>MULTI_DEVICE_KICKED_NOTIFY = 105;</code>
         */
        MULTI_DEVICE_KICKED_NOTIFY(7, 105),
        /**
         * <code>IM_TEXT = 106;</code>
         */
        IM_TEXT(8, 106),
        /**
         * <code>IM_PICTURE = 107;</code>
         */
        IM_PICTURE(9, 107),
        /**
         * <code>IM_AUDIO = 108;</code>
         */
        IM_AUDIO(10, 108),
        /**
         * <code>IM_VIDEO = 109;</code>
         */
        IM_VIDEO(11, 109),
        /**
         * <code>IM_URL = 110;</code>
         */
        IM_URL(12, 110),
        /**
         * <code>IM_LOCATION = 111;</code>
         */
        IM_LOCATION(13, 111),
        /**
         * <code>IM_LOCATION_SHARE_BEGIN = 112;</code>
         */
        IM_LOCATION_SHARE_BEGIN(14, 112),
        /**
         * <code>IM_LOCATION_SHARE_ANSWER = 113;</code>
         */
        IM_LOCATION_SHARE_ANSWER(15, 113),
        /**
         * <code>IM_LOCATION_SHARE_CONTINUE = 114;</code>
         */
        IM_LOCATION_SHARE_CONTINUE(16, 114),
        /**
         * <code>IM_LOCATION_SHARE_END = 115;</code>
         */
        IM_LOCATION_SHARE_END(17, 115),
        /**
         * <code>PHONEDIAL = 117;</code>
         */
        PHONEDIAL(18, 117),
        /**
         * <code>PHONEDIAL_ACK = 118;</code>
         */
        PHONEDIAL_ACK(19, 118),
        /**
         * <code>GET_CONTACTS_INFO = 119;</code>
         */
        GET_CONTACTS_INFO(20, 119),
        /**
         * <code>GET_CONTACTS_INFO_ACK = 120;</code>
         */
        GET_CONTACTS_INFO_ACK(21, 120),
        /**
         * <code>PHP_USER_MODIFYSTATUS = 121;</code>
         */
        PHP_USER_MODIFYSTATUS(22, 121),
        /**
         * <code>PHP_USER_MODIFYSTATUS_ACK = 122;</code>
         */
        PHP_USER_MODIFYSTATUS_ACK(23, 122),
        /**
         * <code>PHP_ADMIN_MODIFYUSERSTATUS = 123;</code>
         */
        PHP_ADMIN_MODIFYUSERSTATUS(24, 123),
        /**
         * <code>PHP_ADMIN_MODIFYUSERSTATUS_ACK = 124;</code>
         */
        PHP_ADMIN_MODIFYUSERSTATUS_ACK(25, 124),
        /**
         * <code>IMCHAT_PERSONAL = 125;</code>
         */
        IMCHAT_PERSONAL(26, 125),
        /**
         * <code>IMCHAT_PERSONAL_ACK = 126;</code>
         */
        IMCHAT_PERSONAL_ACK(27, 126),
        /**
         * <code>IMCHAT_PERSONAL_NOTIFY = 127;</code>
         */
        IMCHAT_PERSONAL_NOTIFY(28, 127),
        /**
         * <code>REQUEST_IP = 400;</code>
         * <p>
         * <pre>
         * BACKEND ONLY.
         * </pre>
         */
        REQUEST_IP(29, 400),
        /**
         * <code>REQUEST_IP_ACK = 401;</code>
         */
        REQUEST_IP_ACK(30, 401),
        /**
         * <code>REGIST_COMMUNICATIONSERVICE = 402;</code>
         */
        REGIST_COMMUNICATIONSERVICE(31, 402),
        /**
         * <code>GENERAL_MESSAGE = 501;</code>
         */
        GENERAL_MESSAGE(32, 501),
        /**
         * <code>POP_GENERAL_MESSAGE = 502;</code>
         */
        POP_GENERAL_MESSAGE(33, 502),
        /**
         * <code>POP_GENERAL_MESSAGE_ACK = 503;</code>
         */
        POP_GENERAL_MESSAGE_ACK(34, 503),
        /**
         * <code>BULLETIN = 600;</code>
         */
        BULLETIN(35, 600),
        /**
         * <code>BULLETIN_NOTIFY = 601;</code>
         */
        BULLETIN_NOTIFY(36, 601),
        /**
         * <code>BULLETIN_PUBLISH = 605;</code>
         */
        BULLETIN_PUBLISH(37, 605),
        /**
         * <code>BULLETIN_PUBLISH_ACK = 606;</code>
         */
        BULLETIN_PUBLISH_ACK(38, 606),
        /**
         * <code>BIZCARD_GET_BYPHONE = 701;</code>
         */
        BIZCARD_GET_BYPHONE(39, 701),
        /**
         * <code>BIZCARD_GET_BYPHONE_ACK = 702;</code>
         */
        BIZCARD_GET_BYPHONE_ACK(40, 702),
        /**
         * <code>BIZCARD_INSERT = 703;</code>
         */
        BIZCARD_INSERT(41, 703),
        /**
         * <code>BIZCARD_INSERT_ACK = 704;</code>
         */
        BIZCARD_INSERT_ACK(42, 704),
        /**
         * <code>BIZCARD_UPDATE = 705;</code>
         */
        BIZCARD_UPDATE(43, 705),
        /**
         * <code>BIZCARD_UPDATE_ACK = 706;</code>
         */
        BIZCARD_UPDATE_ACK(44, 706),
        /**
         * <code>BIZCARD_DELETE = 707;</code>
         */
        BIZCARD_DELETE(45, 707),
        /**
         * <code>BIZCARD_DELETE_ACK = 708;</code>
         */
        BIZCARD_DELETE_ACK(46, 708),
        /**
         * <code>BUSINESS_QUERY_AD = 750;</code>
         * <p>
         * <pre>
         * 商家查询代言
         * </pre>
         */
        BUSINESS_QUERY_AD(47, 750),
        /**
         * <code>BUSINESS_QUERY_AD_ACK = 751;</code>
         */
        BUSINESS_QUERY_AD_ACK(48, 751),
        /**
         * <code>BUSINESS_SAVE_AD = 752;</code>
         */
        BUSINESS_SAVE_AD(49, 752),
        /**
         * <code>BUSINESS_SAVE_AD_ACK = 753;</code>
         */
        BUSINESS_SAVE_AD_ACK(50, 753),
        /**
         * <code>BUSINESS_UPDATE_AD = 754;</code>
         */
        BUSINESS_UPDATE_AD(51, 754),
        /**
         * <code>BUSINESS_UPDATE_AD_ACK = 755;</code>
         */
        BUSINESS_UPDATE_AD_ACK(52, 755),
        /**
         * <code>BUSINESS_DELETE_AD = 756;</code>
         */
        BUSINESS_DELETE_AD(53, 756),
        /**
         * <code>BUSINESS_DELETE_AD_ACK = 757;</code>
         */
        BUSINESS_DELETE_AD_ACK(54, 757),
        /**
         * <code>USERSHOWRULE_RESULT = 758;</code>
         */
        USERSHOWRULE_RESULT(55, 758),
        /**
         * <code>USERSHOWRULE_GET = 759;</code>
         */
        USERSHOWRULE_GET(56, 759),
        /**
         * <code>USERSHOWRULE_SAVE = 760;</code>
         */
        USERSHOWRULE_SAVE(57, 760),
        /**
         * <code>USERSHOWRULE_UPDATE = 761;</code>
         */
        USERSHOWRULE_UPDATE(58, 761),
        /**
         * <code>USERSHOWRULE_DELETE = 762;</code>
         */
        USERSHOWRULE_DELETE(59, 762),
        /**
         * <code>BONDERY_MQ = 10000;</code>
         * <p>
         * <pre>
         * this is the bondery for mq. outside the bondery; com service should post the request to mq.
         * </pre>
         */
        BONDERY_MQ(60, 10000),
        /**
         * <code>SYSTEM_LOG = 10001;</code>
         */
        SYSTEM_LOG(61, 10001),
        /**
         * <code>LOCATIONSHARE = 10700;</code>
         */
        LOCATIONSHARE(62, 10700),
        /**
         * <code>LOCATIONSHARE_NOTIFY = 10701;</code>
         */
        LOCATIONSHARE_NOTIFY(63, 10701),
        /**
         * <code>LOCATIONSHARE_INVIT = 10702;</code>
         */
        LOCATIONSHARE_INVIT(64, 10702),
        /**
         * <code>LOCATIONSHARE_INVIT_ACK = 10703;</code>
         */
        LOCATIONSHARE_INVIT_ACK(65, 10703),
        /**
         * <code>LOCATIONSHARE_INVIT_NOTIFY = 10704;</code>
         */
        LOCATIONSHARE_INVIT_NOTIFY(66, 10704),
        /**
         * <code>LOCATIONSHARE_JOIN = 10705;</code>
         */
        LOCATIONSHARE_JOIN(67, 10705),
        /**
         * <code>LOCATIONSHARE_JOIN_ACK = 10706;</code>
         */
        LOCATIONSHARE_JOIN_ACK(68, 10706),
        /**
         * <code>LOCATIONSHARE_JOIN_NOTIFY = 10707;</code>
         */
        LOCATIONSHARE_JOIN_NOTIFY(69, 10707),
        /**
         * <code>LOCATIONSHARE_QUIT = 10709;</code>
         */
        LOCATIONSHARE_QUIT(70, 10709),
        /**
         * <code>LOCATIONSHARE_QUIT_ACK = 10710;</code>
         */
        LOCATIONSHARE_QUIT_ACK(71, 10710),
        /**
         * <code>LOCATIONSHARE_QUIT_NOTIFY = 10711;</code>
         */
        LOCATIONSHARE_QUIT_NOTIFY(72, 10711),
        /**
         * <code>PUSH_APNS = 10801;</code>
         * <p>
         * <pre>
         * this does not guarantee successed.
         * </pre>
         */
        PUSH_APNS(73, 10801),
        /**
         * <code>PUSH_APNS_ACK = 10802;</code>
         * <p>
         * <pre>
         * and does not give you a ack.
         * </pre>
         */
        PUSH_APNS_ACK(74, 10802),
        /**
         * <code>PUSH_GENERAL = 10805;</code>
         * <p>
         * <pre>
         * Push_General
         * </pre>
         */
        PUSH_GENERAL(75, 10805),
        /**
         * <code>PUSH_SMS = 10806;</code>
         * <p>
         * <pre>
         * Push_SMS
         * </pre>
         */
        PUSH_SMS(76, 10806),
        /**
         * <code>ENDORSEMENT_TAKE = 10901;</code>
         */
        ENDORSEMENT_TAKE(77, 10901),
        /**
         * <code>ENDORSEMENT_TAKE_ACK = 10902;</code>
         */
        ENDORSEMENT_TAKE_ACK(78, 10902),
        /**
         * <code>ENDORSEMENT_QUERY = 10911;</code>
         */
        ENDORSEMENT_QUERY(79, 10911),
        /**
         * <code>ENDORSEMENT_QUERY_ACK = 10912;</code>
         */
        ENDORSEMENT_QUERY_ACK(80, 10912),
        /**
         * <code>ENDORSEMENT_DELET = 10921;</code>
         */
        ENDORSEMENT_DELET(81, 10921),
        /**
         * <code>ENDORSEMENT_DELETE_ACK = 10922;</code>
         */
        ENDORSEMENT_DELETE_ACK(82, 10922),
        /**
         * <code>ENDORSEMENT_ADMIN_QUERY = 10951;</code>
         * <p>
         * <pre>
         * 商家查询代言领取记录数据。
         * </pre>
         */
        ENDORSEMENT_ADMIN_QUERY(83, 10951),
        /**
         * <code>ENDORSEMENT_ADMIN_QUERY_ACK = 10952;</code>
         */
        ENDORSEMENT_ADMIN_QUERY_ACK(84, 10952),
        /**
         * <code>SHOWBIZ_QUERY = 11001;</code>
         */
        SHOWBIZ_QUERY(85, 11001),
        /**
         * <code>SHOWBIZ_QUERY_ACK = 11002;</code>
         */
        SHOWBIZ_QUERY_ACK(86, 11002),
        /**
         * <code>SHOWBIZ_INSERT = 11011;</code>
         */
        SHOWBIZ_INSERT(87, 11011),
        /**
         * <code>SHOWBIZ_INSERT_ACK = 11012;</code>
         */
        SHOWBIZ_INSERT_ACK(88, 11012),
        /**
         * <code>SHOWBIZ_DELETE = 11021;</code>
         */
        SHOWBIZ_DELETE(89, 11021),
        /**
         * <code>SHOWBIZ_DELETE_ACK = 11022;</code>
         */
        SHOWBIZ_DELETE_ACK(90, 11022),
        /**
         * <code>SHOWBIZ_UPDATE = 11031;</code>
         */
        SHOWBIZ_UPDATE(91, 11031),
        /**
         * <code>SHOWBIZ_UPDATE_ACK = 11032;</code>
         */
        SHOWBIZ_UPDATE_ACK(92, 11032),
        /**
         * <code>SHOWPERSONAL_QUERY = 11041;</code>
         */
        SHOWPERSONAL_QUERY(93, 11041),
        /**
         * <code>SHOWPERSONAL_QUERY_ACK = 11042;</code>
         */
        SHOWPERSONAL_QUERY_ACK(94, 11042),
        /**
         * <code>SHOWPERSONAL_INSERT = 11051;</code>
         */
        SHOWPERSONAL_INSERT(95, 11051),
        /**
         * <code>SHOWPERSONAL_INSERT_ACK = 11052;</code>
         */
        SHOWPERSONAL_INSERT_ACK(96, 11052),
        /**
         * <code>SHOWPERSONAL_UPDATE = 11061;</code>
         */
        SHOWPERSONAL_UPDATE(97, 11061),
        /**
         * <code>SHOWPERSONAL_UPDATE_ACK = 11062;</code>
         */
        SHOWPERSONAL_UPDATE_ACK(98, 11062),
        /**
         * <code>SHOWPERSONAL_DELETE = 11071;</code>
         */
        SHOWPERSONAL_DELETE(99, 11071),
        /**
         * <code>SHOWPERSONAL_DELETE_ACK = 11072;</code>
         */
        SHOWPERSONAL_DELETE_ACK(100, 11072),
        /**
         * <code>SHOWDIAL = 11081;</code>
         */
        SHOWDIAL(101, 11081),
        /**
         * <code>SHOWDIAL_ACK = 11082;</code>
         */
        SHOWDIAL_ACK(102, 11082),
        /**
         * <code>SHOWDIAL_NOTIFY = 11083;</code>
         */
        SHOWDIAL_NOTIFY(103, 11083),
        /**
         * <code>SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY = 11091;</code>
         * <p>
         * <pre>
         * 	REPRESENT_QUERY = 11081;
         * 	REPRESENT_QUERY_ACK = 11082;
         * 	REPRESENT_INSERT = 11091;
         * 	REPRESENT_INSERT_ACK = 11092;
         * 	REPRESENT_REVIEW = 11101;
         * 	REPRESENT_REVIEW_ACK = 11102;
         * </pre>
         */
        SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY(104, 11091),;

        /**
         * <code>HEART_BEAT = 1;</code>
         */
        public static final int HEART_BEAT_VALUE = 1;
        /**
         * <code>HEART_BEAT_ACK = 2;</code>
         */
        public static final int HEART_BEAT_ACK_VALUE = 2;
        /**
         * <code>ROUTE_REQ = 20;</code>
         */
        public static final int ROUTE_REQ_VALUE = 20;
        /**
         * <code>USER_LOGIN = 101;</code>
         */
        public static final int USER_LOGIN_VALUE = 101;
        /**
         * <code>USER_LOGIN_ACK = 102;</code>
         */
        public static final int USER_LOGIN_ACK_VALUE = 102;
        /**
         * <code>USER_LOGOFF = 103;</code>
         */
        public static final int USER_LOGOFF_VALUE = 103;
        /**
         * <code>USER_LOGOFF_ACK = 104;</code>
         */
        public static final int USER_LOGOFF_ACK_VALUE = 104;
        /**
         * <code>MULTI_DEVICE_KICKED_NOTIFY = 105;</code>
         */
        public static final int MULTI_DEVICE_KICKED_NOTIFY_VALUE = 105;
        /**
         * <code>IM_TEXT = 106;</code>
         */
        public static final int IM_TEXT_VALUE = 106;
        /**
         * <code>IM_PICTURE = 107;</code>
         */
        public static final int IM_PICTURE_VALUE = 107;
        /**
         * <code>IM_AUDIO = 108;</code>
         */
        public static final int IM_AUDIO_VALUE = 108;
        /**
         * <code>IM_VIDEO = 109;</code>
         */
        public static final int IM_VIDEO_VALUE = 109;
        /**
         * <code>IM_URL = 110;</code>
         */
        public static final int IM_URL_VALUE = 110;
        /**
         * <code>IM_LOCATION = 111;</code>
         */
        public static final int IM_LOCATION_VALUE = 111;
        /**
         * <code>IM_LOCATION_SHARE_BEGIN = 112;</code>
         */
        public static final int IM_LOCATION_SHARE_BEGIN_VALUE = 112;
        /**
         * <code>IM_LOCATION_SHARE_ANSWER = 113;</code>
         */
        public static final int IM_LOCATION_SHARE_ANSWER_VALUE = 113;
        /**
         * <code>IM_LOCATION_SHARE_CONTINUE = 114;</code>
         */
        public static final int IM_LOCATION_SHARE_CONTINUE_VALUE = 114;
        /**
         * <code>IM_LOCATION_SHARE_END = 115;</code>
         */
        public static final int IM_LOCATION_SHARE_END_VALUE = 115;
        /**
         * <code>PHONEDIAL = 117;</code>
         */
        public static final int PHONEDIAL_VALUE = 117;
        /**
         * <code>PHONEDIAL_ACK = 118;</code>
         */
        public static final int PHONEDIAL_ACK_VALUE = 118;
        /**
         * <code>GET_CONTACTS_INFO = 119;</code>
         */
        public static final int GET_CONTACTS_INFO_VALUE = 119;
        /**
         * <code>GET_CONTACTS_INFO_ACK = 120;</code>
         */
        public static final int GET_CONTACTS_INFO_ACK_VALUE = 120;
        /**
         * <code>PHP_USER_MODIFYSTATUS = 121;</code>
         */
        public static final int PHP_USER_MODIFYSTATUS_VALUE = 121;
        /**
         * <code>PHP_USER_MODIFYSTATUS_ACK = 122;</code>
         */
        public static final int PHP_USER_MODIFYSTATUS_ACK_VALUE = 122;
        /**
         * <code>PHP_ADMIN_MODIFYUSERSTATUS = 123;</code>
         */
        public static final int PHP_ADMIN_MODIFYUSERSTATUS_VALUE = 123;
        /**
         * <code>PHP_ADMIN_MODIFYUSERSTATUS_ACK = 124;</code>
         */
        public static final int PHP_ADMIN_MODIFYUSERSTATUS_ACK_VALUE = 124;
        /**
         * <code>IMCHAT_PERSONAL = 125;</code>
         */
        public static final int IMCHAT_PERSONAL_VALUE = 125;
        /**
         * <code>IMCHAT_PERSONAL_ACK = 126;</code>
         */
        public static final int IMCHAT_PERSONAL_ACK_VALUE = 126;
        /**
         * <code>IMCHAT_PERSONAL_NOTIFY = 127;</code>
         */
        public static final int IMCHAT_PERSONAL_NOTIFY_VALUE = 127;
        /**
         * <code>REQUEST_IP = 400;</code>
         * <p>
         * <pre>
         * BACKEND ONLY.
         * </pre>
         */
        public static final int REQUEST_IP_VALUE = 400;
        /**
         * <code>REQUEST_IP_ACK = 401;</code>
         */
        public static final int REQUEST_IP_ACK_VALUE = 401;
        /**
         * <code>REGIST_COMMUNICATIONSERVICE = 402;</code>
         */
        public static final int REGIST_COMMUNICATIONSERVICE_VALUE = 402;
        /**
         * <code>GENERAL_MESSAGE = 501;</code>
         */
        public static final int GENERAL_MESSAGE_VALUE = 501;
        /**
         * <code>POP_GENERAL_MESSAGE = 502;</code>
         */
        public static final int POP_GENERAL_MESSAGE_VALUE = 502;
        /**
         * <code>POP_GENERAL_MESSAGE_ACK = 503;</code>
         */
        public static final int POP_GENERAL_MESSAGE_ACK_VALUE = 503;
        /**
         * <code>BULLETIN = 600;</code>
         */
        public static final int BULLETIN_VALUE = 600;
        /**
         * <code>BULLETIN_NOTIFY = 601;</code>
         */
        public static final int BULLETIN_NOTIFY_VALUE = 601;
        /**
         * <code>BULLETIN_PUBLISH = 605;</code>
         */
        public static final int BULLETIN_PUBLISH_VALUE = 605;
        /**
         * <code>BULLETIN_PUBLISH_ACK = 606;</code>
         */
        public static final int BULLETIN_PUBLISH_ACK_VALUE = 606;
        /**
         * <code>BIZCARD_GET_BYPHONE = 701;</code>
         */
        public static final int BIZCARD_GET_BYPHONE_VALUE = 701;
        /**
         * <code>BIZCARD_GET_BYPHONE_ACK = 702;</code>
         */
        public static final int BIZCARD_GET_BYPHONE_ACK_VALUE = 702;
        /**
         * <code>BIZCARD_INSERT = 703;</code>
         */
        public static final int BIZCARD_INSERT_VALUE = 703;
        /**
         * <code>BIZCARD_INSERT_ACK = 704;</code>
         */
        public static final int BIZCARD_INSERT_ACK_VALUE = 704;
        /**
         * <code>BIZCARD_UPDATE = 705;</code>
         */
        public static final int BIZCARD_UPDATE_VALUE = 705;
        /**
         * <code>BIZCARD_UPDATE_ACK = 706;</code>
         */
        public static final int BIZCARD_UPDATE_ACK_VALUE = 706;
        /**
         * <code>BIZCARD_DELETE = 707;</code>
         */
        public static final int BIZCARD_DELETE_VALUE = 707;
        /**
         * <code>BIZCARD_DELETE_ACK = 708;</code>
         */
        public static final int BIZCARD_DELETE_ACK_VALUE = 708;
        /**
         * <code>BUSINESS_QUERY_AD = 750;</code>
         * <p>
         * <pre>
         * 商家查询代言
         * </pre>
         */
        public static final int BUSINESS_QUERY_AD_VALUE = 750;
        /**
         * <code>BUSINESS_QUERY_AD_ACK = 751;</code>
         */
        public static final int BUSINESS_QUERY_AD_ACK_VALUE = 751;
        /**
         * <code>BUSINESS_SAVE_AD = 752;</code>
         */
        public static final int BUSINESS_SAVE_AD_VALUE = 752;
        /**
         * <code>BUSINESS_SAVE_AD_ACK = 753;</code>
         */
        public static final int BUSINESS_SAVE_AD_ACK_VALUE = 753;
        /**
         * <code>BUSINESS_UPDATE_AD = 754;</code>
         */
        public static final int BUSINESS_UPDATE_AD_VALUE = 754;
        /**
         * <code>BUSINESS_UPDATE_AD_ACK = 755;</code>
         */
        public static final int BUSINESS_UPDATE_AD_ACK_VALUE = 755;
        /**
         * <code>BUSINESS_DELETE_AD = 756;</code>
         */
        public static final int BUSINESS_DELETE_AD_VALUE = 756;
        /**
         * <code>BUSINESS_DELETE_AD_ACK = 757;</code>
         */
        public static final int BUSINESS_DELETE_AD_ACK_VALUE = 757;
        /**
         * <code>USERSHOWRULE_RESULT = 758;</code>
         */
        public static final int USERSHOWRULE_RESULT_VALUE = 758;
        /**
         * <code>USERSHOWRULE_GET = 759;</code>
         */
        public static final int USERSHOWRULE_GET_VALUE = 759;
        /**
         * <code>USERSHOWRULE_SAVE = 760;</code>
         */
        public static final int USERSHOWRULE_SAVE_VALUE = 760;
        /**
         * <code>USERSHOWRULE_UPDATE = 761;</code>
         */
        public static final int USERSHOWRULE_UPDATE_VALUE = 761;
        /**
         * <code>USERSHOWRULE_DELETE = 762;</code>
         */
        public static final int USERSHOWRULE_DELETE_VALUE = 762;
        /**
         * <code>BONDERY_MQ = 10000;</code>
         * <p>
         * <pre>
         * this is the bondery for mq. outside the bondery; com service should post the request to mq.
         * </pre>
         */
        public static final int BONDERY_MQ_VALUE = 10000;
        /**
         * <code>SYSTEM_LOG = 10001;</code>
         */
        public static final int SYSTEM_LOG_VALUE = 10001;
        /**
         * <code>LOCATIONSHARE = 10700;</code>
         */
        public static final int LOCATIONSHARE_VALUE = 10700;
        /**
         * <code>LOCATIONSHARE_NOTIFY = 10701;</code>
         */
        public static final int LOCATIONSHARE_NOTIFY_VALUE = 10701;
        /**
         * <code>LOCATIONSHARE_INVIT = 10702;</code>
         */
        public static final int LOCATIONSHARE_INVIT_VALUE = 10702;
        /**
         * <code>LOCATIONSHARE_INVIT_ACK = 10703;</code>
         */
        public static final int LOCATIONSHARE_INVIT_ACK_VALUE = 10703;
        /**
         * <code>LOCATIONSHARE_INVIT_NOTIFY = 10704;</code>
         */
        public static final int LOCATIONSHARE_INVIT_NOTIFY_VALUE = 10704;
        /**
         * <code>LOCATIONSHARE_JOIN = 10705;</code>
         */
        public static final int LOCATIONSHARE_JOIN_VALUE = 10705;
        /**
         * <code>LOCATIONSHARE_JOIN_ACK = 10706;</code>
         */
        public static final int LOCATIONSHARE_JOIN_ACK_VALUE = 10706;
        /**
         * <code>LOCATIONSHARE_JOIN_NOTIFY = 10707;</code>
         */
        public static final int LOCATIONSHARE_JOIN_NOTIFY_VALUE = 10707;
        /**
         * <code>LOCATIONSHARE_QUIT = 10709;</code>
         */
        public static final int LOCATIONSHARE_QUIT_VALUE = 10709;
        /**
         * <code>LOCATIONSHARE_QUIT_ACK = 10710;</code>
         */
        public static final int LOCATIONSHARE_QUIT_ACK_VALUE = 10710;
        /**
         * <code>LOCATIONSHARE_QUIT_NOTIFY = 10711;</code>
         */
        public static final int LOCATIONSHARE_QUIT_NOTIFY_VALUE = 10711;
        /**
         * <code>PUSH_APNS = 10801;</code>
         * <p>
         * <pre>
         * this does not guarantee successed.
         * </pre>
         */
        public static final int PUSH_APNS_VALUE = 10801;
        /**
         * <code>PUSH_APNS_ACK = 10802;</code>
         * <p>
         * <pre>
         * and does not give you a ack.
         * </pre>
         */
        public static final int PUSH_APNS_ACK_VALUE = 10802;
        /**
         * <code>PUSH_GENERAL = 10805;</code>
         * <p>
         * <pre>
         * Push_General
         * </pre>
         */
        public static final int PUSH_GENERAL_VALUE = 10805;
        /**
         * <code>PUSH_SMS = 10806;</code>
         * <p>
         * <pre>
         * Push_SMS
         * </pre>
         */
        public static final int PUSH_SMS_VALUE = 10806;
        /**
         * <code>ENDORSEMENT_TAKE = 10901;</code>
         */
        public static final int ENDORSEMENT_TAKE_VALUE = 10901;
        /**
         * <code>ENDORSEMENT_TAKE_ACK = 10902;</code>
         */
        public static final int ENDORSEMENT_TAKE_ACK_VALUE = 10902;
        /**
         * <code>ENDORSEMENT_QUERY = 10911;</code>
         */
        public static final int ENDORSEMENT_QUERY_VALUE = 10911;
        /**
         * <code>ENDORSEMENT_QUERY_ACK = 10912;</code>
         */
        public static final int ENDORSEMENT_QUERY_ACK_VALUE = 10912;
        /**
         * <code>ENDORSEMENT_DELET = 10921;</code>
         */
        public static final int ENDORSEMENT_DELET_VALUE = 10921;
        /**
         * <code>ENDORSEMENT_DELETE_ACK = 10922;</code>
         */
        public static final int ENDORSEMENT_DELETE_ACK_VALUE = 10922;
        /**
         * <code>ENDORSEMENT_ADMIN_QUERY = 10951;</code>
         * <p>
         * <pre>
         * 商家查询代言领取记录数据。
         * </pre>
         */
        public static final int ENDORSEMENT_ADMIN_QUERY_VALUE = 10951;
        /**
         * <code>ENDORSEMENT_ADMIN_QUERY_ACK = 10952;</code>
         */
        public static final int ENDORSEMENT_ADMIN_QUERY_ACK_VALUE = 10952;
        /**
         * <code>SHOWBIZ_QUERY = 11001;</code>
         */
        public static final int SHOWBIZ_QUERY_VALUE = 11001;
        /**
         * <code>SHOWBIZ_QUERY_ACK = 11002;</code>
         */
        public static final int SHOWBIZ_QUERY_ACK_VALUE = 11002;
        /**
         * <code>SHOWBIZ_INSERT = 11011;</code>
         */
        public static final int SHOWBIZ_INSERT_VALUE = 11011;
        /**
         * <code>SHOWBIZ_INSERT_ACK = 11012;</code>
         */
        public static final int SHOWBIZ_INSERT_ACK_VALUE = 11012;
        /**
         * <code>SHOWBIZ_DELETE = 11021;</code>
         */
        public static final int SHOWBIZ_DELETE_VALUE = 11021;
        /**
         * <code>SHOWBIZ_DELETE_ACK = 11022;</code>
         */
        public static final int SHOWBIZ_DELETE_ACK_VALUE = 11022;
        /**
         * <code>SHOWBIZ_UPDATE = 11031;</code>
         */
        public static final int SHOWBIZ_UPDATE_VALUE = 11031;
        /**
         * <code>SHOWBIZ_UPDATE_ACK = 11032;</code>
         */
        public static final int SHOWBIZ_UPDATE_ACK_VALUE = 11032;
        /**
         * <code>SHOWPERSONAL_QUERY = 11041;</code>
         */
        public static final int SHOWPERSONAL_QUERY_VALUE = 11041;
        /**
         * <code>SHOWPERSONAL_QUERY_ACK = 11042;</code>
         */
        public static final int SHOWPERSONAL_QUERY_ACK_VALUE = 11042;
        /**
         * <code>SHOWPERSONAL_INSERT = 11051;</code>
         */
        public static final int SHOWPERSONAL_INSERT_VALUE = 11051;
        /**
         * <code>SHOWPERSONAL_INSERT_ACK = 11052;</code>
         */
        public static final int SHOWPERSONAL_INSERT_ACK_VALUE = 11052;
        /**
         * <code>SHOWPERSONAL_UPDATE = 11061;</code>
         */
        public static final int SHOWPERSONAL_UPDATE_VALUE = 11061;
        /**
         * <code>SHOWPERSONAL_UPDATE_ACK = 11062;</code>
         */
        public static final int SHOWPERSONAL_UPDATE_ACK_VALUE = 11062;
        /**
         * <code>SHOWPERSONAL_DELETE = 11071;</code>
         */
        public static final int SHOWPERSONAL_DELETE_VALUE = 11071;
        /**
         * <code>SHOWPERSONAL_DELETE_ACK = 11072;</code>
         */
        public static final int SHOWPERSONAL_DELETE_ACK_VALUE = 11072;
        /**
         * <code>SHOWDIAL = 11081;</code>
         */
        public static final int SHOWDIAL_VALUE = 11081;
        /**
         * <code>SHOWDIAL_ACK = 11082;</code>
         */
        public static final int SHOWDIAL_ACK_VALUE = 11082;
        /**
         * <code>SHOWDIAL_NOTIFY = 11083;</code>
         */
        public static final int SHOWDIAL_NOTIFY_VALUE = 11083;
        /**
         * <code>SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY = 11091;</code>
         * <p>
         * <pre>
         * 	REPRESENT_QUERY = 11081;
         * 	REPRESENT_QUERY_ACK = 11082;
         * 	REPRESENT_INSERT = 11091;
         * 	REPRESENT_INSERT_ACK = 11092;
         * 	REPRESENT_REVIEW = 11101;
         * 	REPRESENT_REVIEW_ACK = 11102;
         * </pre>
         */
        public static final int SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY_VALUE = 11091;


        public final int getNumber() {
            return value;
        }

        public static COMMANDID valueOf(int value) {
            switch (value) {
                case 1:
                    return HEART_BEAT;
                case 2:
                    return HEART_BEAT_ACK;
                case 20:
                    return ROUTE_REQ;
                case 101:
                    return USER_LOGIN;
                case 102:
                    return USER_LOGIN_ACK;
                case 103:
                    return USER_LOGOFF;
                case 104:
                    return USER_LOGOFF_ACK;
                case 105:
                    return MULTI_DEVICE_KICKED_NOTIFY;
                case 106:
                    return IM_TEXT;
                case 107:
                    return IM_PICTURE;
                case 108:
                    return IM_AUDIO;
                case 109:
                    return IM_VIDEO;
                case 110:
                    return IM_URL;
                case 111:
                    return IM_LOCATION;
                case 112:
                    return IM_LOCATION_SHARE_BEGIN;
                case 113:
                    return IM_LOCATION_SHARE_ANSWER;
                case 114:
                    return IM_LOCATION_SHARE_CONTINUE;
                case 115:
                    return IM_LOCATION_SHARE_END;
                case 117:
                    return PHONEDIAL;
                case 118:
                    return PHONEDIAL_ACK;
                case 119:
                    return GET_CONTACTS_INFO;
                case 120:
                    return GET_CONTACTS_INFO_ACK;
                case 121:
                    return PHP_USER_MODIFYSTATUS;
                case 122:
                    return PHP_USER_MODIFYSTATUS_ACK;
                case 123:
                    return PHP_ADMIN_MODIFYUSERSTATUS;
                case 124:
                    return PHP_ADMIN_MODIFYUSERSTATUS_ACK;
                case 125:
                    return IMCHAT_PERSONAL;
                case 126:
                    return IMCHAT_PERSONAL_ACK;
                case 127:
                    return IMCHAT_PERSONAL_NOTIFY;
                case 400:
                    return REQUEST_IP;
                case 401:
                    return REQUEST_IP_ACK;
                case 402:
                    return REGIST_COMMUNICATIONSERVICE;
                case 501:
                    return GENERAL_MESSAGE;
                case 502:
                    return POP_GENERAL_MESSAGE;
                case 503:
                    return POP_GENERAL_MESSAGE_ACK;
                case 600:
                    return BULLETIN;
                case 601:
                    return BULLETIN_NOTIFY;
                case 605:
                    return BULLETIN_PUBLISH;
                case 606:
                    return BULLETIN_PUBLISH_ACK;
                case 701:
                    return BIZCARD_GET_BYPHONE;
                case 702:
                    return BIZCARD_GET_BYPHONE_ACK;
                case 703:
                    return BIZCARD_INSERT;
                case 704:
                    return BIZCARD_INSERT_ACK;
                case 705:
                    return BIZCARD_UPDATE;
                case 706:
                    return BIZCARD_UPDATE_ACK;
                case 707:
                    return BIZCARD_DELETE;
                case 708:
                    return BIZCARD_DELETE_ACK;
                case 750:
                    return BUSINESS_QUERY_AD;
                case 751:
                    return BUSINESS_QUERY_AD_ACK;
                case 752:
                    return BUSINESS_SAVE_AD;
                case 753:
                    return BUSINESS_SAVE_AD_ACK;
                case 754:
                    return BUSINESS_UPDATE_AD;
                case 755:
                    return BUSINESS_UPDATE_AD_ACK;
                case 756:
                    return BUSINESS_DELETE_AD;
                case 757:
                    return BUSINESS_DELETE_AD_ACK;
                case 758:
                    return USERSHOWRULE_RESULT;
                case 759:
                    return USERSHOWRULE_GET;
                case 760:
                    return USERSHOWRULE_SAVE;
                case 761:
                    return USERSHOWRULE_UPDATE;
                case 762:
                    return USERSHOWRULE_DELETE;
                case 10000:
                    return BONDERY_MQ;
                case 10001:
                    return SYSTEM_LOG;
                case 10700:
                    return LOCATIONSHARE;
                case 10701:
                    return LOCATIONSHARE_NOTIFY;
                case 10702:
                    return LOCATIONSHARE_INVIT;
                case 10703:
                    return LOCATIONSHARE_INVIT_ACK;
                case 10704:
                    return LOCATIONSHARE_INVIT_NOTIFY;
                case 10705:
                    return LOCATIONSHARE_JOIN;
                case 10706:
                    return LOCATIONSHARE_JOIN_ACK;
                case 10707:
                    return LOCATIONSHARE_JOIN_NOTIFY;
                case 10709:
                    return LOCATIONSHARE_QUIT;
                case 10710:
                    return LOCATIONSHARE_QUIT_ACK;
                case 10711:
                    return LOCATIONSHARE_QUIT_NOTIFY;
                case 10801:
                    return PUSH_APNS;
                case 10802:
                    return PUSH_APNS_ACK;
                case 10805:
                    return PUSH_GENERAL;
                case 10806:
                    return PUSH_SMS;
                case 10901:
                    return ENDORSEMENT_TAKE;
                case 10902:
                    return ENDORSEMENT_TAKE_ACK;
                case 10911:
                    return ENDORSEMENT_QUERY;
                case 10912:
                    return ENDORSEMENT_QUERY_ACK;
                case 10921:
                    return ENDORSEMENT_DELET;
                case 10922:
                    return ENDORSEMENT_DELETE_ACK;
                case 10951:
                    return ENDORSEMENT_ADMIN_QUERY;
                case 10952:
                    return ENDORSEMENT_ADMIN_QUERY_ACK;
                case 11001:
                    return SHOWBIZ_QUERY;
                case 11002:
                    return SHOWBIZ_QUERY_ACK;
                case 11011:
                    return SHOWBIZ_INSERT;
                case 11012:
                    return SHOWBIZ_INSERT_ACK;
                case 11021:
                    return SHOWBIZ_DELETE;
                case 11022:
                    return SHOWBIZ_DELETE_ACK;
                case 11031:
                    return SHOWBIZ_UPDATE;
                case 11032:
                    return SHOWBIZ_UPDATE_ACK;
                case 11041:
                    return SHOWPERSONAL_QUERY;
                case 11042:
                    return SHOWPERSONAL_QUERY_ACK;
                case 11051:
                    return SHOWPERSONAL_INSERT;
                case 11052:
                    return SHOWPERSONAL_INSERT_ACK;
                case 11061:
                    return SHOWPERSONAL_UPDATE;
                case 11062:
                    return SHOWPERSONAL_UPDATE_ACK;
                case 11071:
                    return SHOWPERSONAL_DELETE;
                case 11072:
                    return SHOWPERSONAL_DELETE_ACK;
                case 11081:
                    return SHOWDIAL;
                case 11082:
                    return SHOWDIAL_ACK;
                case 11083:
                    return SHOWDIAL_NOTIFY;
                case 11091:
                    return SHOWDIAL_CACHE_UPDATE_SYSTEMNOTIFY;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<COMMANDID>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<COMMANDID>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<COMMANDID>() {
                    public COMMANDID findValueByNumber(int number) {
                        return COMMANDID.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(0);
        }

        private static final COMMANDID[] VALUES = values();

        public static COMMANDID valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        COMMANDID(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:COMMANDID)
    }

    /**
     * Protobuf enum {@code USER_TYPE}
     */
    public enum USER_TYPE
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>USER_TYPE_UNKNOWN = 0;</code>
         */
        USER_TYPE_UNKNOWN(0, 0),
        /**
         * <code>USER_TYPE_PERSONAL = 1;</code>
         */
        USER_TYPE_PERSONAL(1, 1),
        /**
         * <code>USER_TYPE_PUBLIC_ACCOUNT = 2;</code>
         */
        USER_TYPE_PUBLIC_ACCOUNT(2, 2),;

        /**
         * <code>USER_TYPE_UNKNOWN = 0;</code>
         */
        public static final int USER_TYPE_UNKNOWN_VALUE = 0;
        /**
         * <code>USER_TYPE_PERSONAL = 1;</code>
         */
        public static final int USER_TYPE_PERSONAL_VALUE = 1;
        /**
         * <code>USER_TYPE_PUBLIC_ACCOUNT = 2;</code>
         */
        public static final int USER_TYPE_PUBLIC_ACCOUNT_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        public static USER_TYPE valueOf(int value) {
            switch (value) {
                case 0:
                    return USER_TYPE_UNKNOWN;
                case 1:
                    return USER_TYPE_PERSONAL;
                case 2:
                    return USER_TYPE_PUBLIC_ACCOUNT;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<USER_TYPE>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<USER_TYPE>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<USER_TYPE>() {
                    public USER_TYPE findValueByNumber(int number) {
                        return USER_TYPE.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(1);
        }

        private static final USER_TYPE[] VALUES = values();

        public static USER_TYPE valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        USER_TYPE(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:USER_TYPE)
    }

    /**
     * Protobuf enum {@code ERRNO_CODE}
     */
    public enum ERRNO_CODE
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>ERRNO_CODE_OK = 0;</code>
         */
        ERRNO_CODE_OK(0, 0),
        /**
         * <code>ERRNO_CODE_DEFAULT = 2;</code>
         * <p>
         * <pre>
         * 2-10 resrved
         * </pre>
         */
        ERRNO_CODE_DEFAULT(1, 2),
        /**
         * <code>ERRNO_CODE_LOGIN_IN_OTHER_DEVICE = 100;</code>
         * <p>
         * <pre>
         * 异地登陆
         * </pre>
         */
        ERRNO_CODE_LOGIN_IN_OTHER_DEVICE(2, 100),
        /**
         * <code>ERRNO_CODE_NO_PROTOCOL = 101;</code>
         * <p>
         * <pre>
         * 没有这个协议
         * </pre>
         */
        ERRNO_CODE_NO_PROTOCOL(3, 101),
        /**
         * <code>ERRNO_CODE_TAG_NO_PROTOCOL = 102;</code>
         * <p>
         * <pre>
         * tag不是这个协议的
         * </pre>
         */
        ERRNO_CODE_TAG_NO_PROTOCOL(4, 102),
        /**
         * <code>ERRNO_CODE_PUSH_QUEUE = 103;</code>
         * <p>
         * <pre>
         * 数据入队列失败
         * </pre>
         */
        ERRNO_CODE_PUSH_QUEUE(5, 103),
        /**
         * <code>ERRNO_CODE_LOGON_NO_PHONE_S = 104;</code>
         * <p>
         * <pre>
         * LOGON无TAG_PHONE_S
         * </pre>
         */
        ERRNO_CODE_LOGON_NO_PHONE_S(6, 104),
        /**
         * <code>ERRNO_CODE_HEART_ERR_SESSION_S = 105;</code>
         * <p>
         * <pre>
         * HEART上传TAG_SESSION_S无效
         * </pre>
         */
        ERRNO_CODE_HEART_ERR_SESSION_S(7, 105),
        /**
         * <code>ERRNO_CODE_NOT_LOGON = 106;</code>
         * <p>
         * <pre>
         * 未登录
         * </pre>
         */
        ERRNO_CODE_NOT_LOGON(8, 106),
        /**
         * <code>ERRNO_CODE_WITHOUT_TAG = 107;</code>
         * <p>
         * <pre>
         * 缺少必备项
         * </pre>
         */
        ERRNO_CODE_WITHOUT_TAG(9, 107),
        /**
         * <code>ERRNO_CODE_WITHOUT_UID = 108;</code>
         * <p>
         * <pre>
         * 缺少uid
         * </pre>
         */
        ERRNO_CODE_WITHOUT_UID(10, 108),
        /**
         * <code>ERRNO_CODE_WITHOUT_TERMID = 109;</code>
         * <p>
         * <pre>
         * 缺少termid
         * </pre>
         */
        ERRNO_CODE_WITHOUT_TERMID(11, 109),
        /**
         * <code>ERRNO_CODE_ERR_SESSIONID = 110;</code>
         * <p>
         * <pre>
         * 上传请求的TAG_SESSION_ID无效
         * </pre>
         */
        ERRNO_CODE_ERR_SESSIONID(12, 110),
        /**
         * <code>ERRNO_CODE_TERM_UNALIVE = 111;</code>
         * <p>
         * <pre>
         * 终端去活
         * </pre>
         */
        ERRNO_CODE_TERM_UNALIVE(13, 111),
        /**
         * <code>ERRNO_CODE_ERR_UID = 112;</code>
         * <p>
         * <pre>
         * uid错误
         * </pre>
         */
        ERRNO_CODE_ERR_UID(14, 112),
        /**
         * <code>ERRNO_CODE_ERR_PID = 113;</code>
         * <p>
         * <pre>
         * Pid错误
         * </pre>
         */
        ERRNO_CODE_ERR_PID(15, 113),
        /**
         * <code>ERRNO_CODE_ERR_RESEND = 114;</code>
         * <p>
         * <pre>
         * 重复消息
         * </pre>
         */
        ERRNO_CODE_ERR_RESEND(16, 114),
        /**
         * <code>ERRNO_CODE_ERR_TID = 115;</code>
         * <p>
         * <pre>
         * Tid错误
         * </pre>
         */
        ERRNO_CODE_ERR_TID(17, 115),
        /**
         * <code>ERRNO_CODE_SQL = 200;</code>
         * <p>
         * <pre>
         * Storage failure
         * </pre>
         */
        ERRNO_CODE_SQL(18, 200),
        /**
         * <code>ERRNO_CODE_DATA_SRAL = 201;</code>
         * <p>
         * <pre>
         * 数据序列化失败
         * </pre>
         */
        ERRNO_CODE_DATA_SRAL(19, 201),
        /**
         * <code>ERRNO_CODE_NOT_FIND_TARGET_USERID = 203;</code>
         * <p>
         * <pre>
         * 没找到对方的用户id
         * </pre>
         */
        ERRNO_CODE_NOT_FIND_TARGET_USERID(20, 203),
        /**
         * <code>ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL = 204;</code>
         * <p>
         * <pre>
         * MYSQL数据入库失败
         * </pre>
         */
        ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL(21, 204),
        /**
         * <code>ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS = 205;</code>
         * <p>
         * <pre>
         * redis数据入库失败
         * </pre>
         */
        ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS(22, 205),
        /**
         * <code>ERRNO_CODE_DB_SERVER_EXCEPTION = 206;</code>
         * <p>
         * <pre>
         * 数据库服务器异常
         * </pre>
         */
        ERRNO_CODE_DB_SERVER_EXCEPTION(23, 206),
        /**
         * <code>ERRNO_CODE_USER_SESSION_ERROR = 207;</code>
         * <p>
         * <pre>
         * 登陆的sissionid不正确
         * </pre>
         */
        ERRNO_CODE_USER_SESSION_ERROR(24, 207),
        /**
         * <code>ERRNO_CODE_USER_NOT_LOGIN = 208;</code>
         * <p>
         * <pre>
         * 用户未登陆
         * </pre>
         */
        ERRNO_CODE_USER_NOT_LOGIN(25, 208),
        /**
         * <code>ERRNO_CODE_USER_ID_ERROR = 209;</code>
         * <p>
         * <pre>
         * 登陆的user_id不正确
         * </pre>
         */
        ERRNO_CODE_USER_ID_ERROR(26, 209),
        /**
         * <code>ERRNO_CODE_USER_SEND_TOROUTE_ERROR = 210;</code>
         * <p>
         * <pre>
         * 转发至路由失败
         * </pre>
         */
        ERRNO_CODE_USER_SEND_TOROUTE_ERROR(27, 210),
        /**
         * <code>ERRNO_CODE_NOT_DST_PHONE = 211;</code>
         * <p>
         * <pre>
         * 缺少对方的电话号码
         * </pre>
         */
        ERRNO_CODE_NOT_DST_PHONE(28, 211),
        /**
         * <code>ERRNO_CODE_DATABASE_QUERY_FAILDED = 212;</code>
         * <p>
         * <pre>
         * 数据库查询失败
         * </pre>
         */
        ERRNO_CODE_DATABASE_QUERY_FAILDED(29, 212),
        /**
         * <code>ERRNO_CODE_DATA_EXCEPTION = 213;</code>
         * <p>
         * <pre>
         * 数据异常
         * </pre>
         */
        ERRNO_CODE_DATA_EXCEPTION(30, 213),
        /**
         * <code>ERRNO_CODE_NOT_SESSIONID = 214;</code>
         * <p>
         * <pre>
         * 没有携带session id
         * </pre>
         */
        ERRNO_CODE_NOT_SESSIONID(31, 214),
        /**
         * <code>ERRNO_CODE_NOT_PHONE = 215;</code>
         * <p>
         * <pre>
         * 没有携带手机号码
         * </pre>
         */
        ERRNO_CODE_NOT_PHONE(32, 215),
        /**
         * <code>ERRNO_CODE_PHONE_ERROR = 216;</code>
         * <p>
         * <pre>
         * 手机号码错误
         * </pre>
         */
        ERRNO_CODE_PHONE_ERROR(33, 216),
        /**
         * <code>ERRNO_CODE_DATABASE_NOT_DATA = 217;</code>
         * <p>
         * <pre>
         * 数据库没有数据
         * </pre>
         */
        ERRNO_CODE_DATABASE_NOT_DATA(34, 217),
        /**
         * <code>ERRNO_CODE_SHOW_EXPIRED = 218;</code>
         * <p>
         * <pre>
         * 对方的秀已经过期
         * </pre>
         */
        ERRNO_CODE_SHOW_EXPIRED(35, 218),
        /**
         * <code>ERRNO_CODE_NOT_TOKEN_ID = 219;</code>
         * <p>
         * <pre>
         * 没有携带token id
         * </pre>
         */
        ERRNO_CODE_NOT_TOKEN_ID(36, 219),
        /**
         * <code>ERRNO_CODE_NOT_SHOW = 220;</code>
         * <p>
         * <pre>
         * 没有找到对方的秀信息
         * </pre>
         */
        ERRNO_CODE_NOT_SHOW(37, 220),
        /**
         * <code>ERRNO_CODE_NOT_HUXIN_USER = 403;</code>
         * <p>
         * <pre>
         * 非呼信用户
         * </pre>
         */
        ERRNO_CODE_NOT_HUXIN_USER(38, 403),
        /**
         * <code>ERRNO_CODE_BLOCKED_BY_DST_USER = 501;</code>
         * <p>
         * <pre>
         * </pre>
         */
        ERRNO_CODE_BLOCKED_BY_DST_USER(39, 501),
        /**
         * <code>ERRNO_CODE_INVALID_USER_INFO = 1101;</code>
         */
        ERRNO_CODE_INVALID_USER_INFO(40, 1101),
        /**
         * <code>ERRNO_CODE_INVALID_SESSION = 1102;</code>
         */
        ERRNO_CODE_INVALID_SESSION(41, 1102),
        /**
         * <code>ERRNO_CODE_INVALID_PASSWD = 1103;</code>
         */
        ERRNO_CODE_INVALID_PASSWD(42, 1103),
        /**
         * <code>ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER = 1201;</code>
         */
        ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER(43, 1201),
        /**
         * <code>ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED = 1202;</code>
         */
        ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED(44, 1202),
        /**
         * <code>ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST = 1301;</code>
         */
        ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST(45, 1301),
        /**
         * <code>ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK = 1302;</code>
         */
        ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK(46, 1302),;

        /**
         * <code>ERRNO_CODE_OK = 0;</code>
         */
        public static final int ERRNO_CODE_OK_VALUE = 0;
        /**
         * <code>ERRNO_CODE_DEFAULT = 2;</code>
         * <p>
         * <pre>
         * 2-10 resrved
         * </pre>
         */
        public static final int ERRNO_CODE_DEFAULT_VALUE = 2;
        /**
         * <code>ERRNO_CODE_LOGIN_IN_OTHER_DEVICE = 100;</code>
         * <p>
         * <pre>
         * 异地登陆
         * </pre>
         */
        public static final int ERRNO_CODE_LOGIN_IN_OTHER_DEVICE_VALUE = 100;
        /**
         * <code>ERRNO_CODE_NO_PROTOCOL = 101;</code>
         * <p>
         * <pre>
         * 没有这个协议
         * </pre>
         */
        public static final int ERRNO_CODE_NO_PROTOCOL_VALUE = 101;
        /**
         * <code>ERRNO_CODE_TAG_NO_PROTOCOL = 102;</code>
         * <p>
         * <pre>
         * tag不是这个协议的
         * </pre>
         */
        public static final int ERRNO_CODE_TAG_NO_PROTOCOL_VALUE = 102;
        /**
         * <code>ERRNO_CODE_PUSH_QUEUE = 103;</code>
         * <p>
         * <pre>
         * 数据入队列失败
         * </pre>
         */
        public static final int ERRNO_CODE_PUSH_QUEUE_VALUE = 103;
        /**
         * <code>ERRNO_CODE_LOGON_NO_PHONE_S = 104;</code>
         * <p>
         * <pre>
         * LOGON无TAG_PHONE_S
         * </pre>
         */
        public static final int ERRNO_CODE_LOGON_NO_PHONE_S_VALUE = 104;
        /**
         * <code>ERRNO_CODE_HEART_ERR_SESSION_S = 105;</code>
         * <p>
         * <pre>
         * HEART上传TAG_SESSION_S无效
         * </pre>
         */
        public static final int ERRNO_CODE_HEART_ERR_SESSION_S_VALUE = 105;
        /**
         * <code>ERRNO_CODE_NOT_LOGON = 106;</code>
         * <p>
         * <pre>
         * 未登录
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_LOGON_VALUE = 106;
        /**
         * <code>ERRNO_CODE_WITHOUT_TAG = 107;</code>
         * <p>
         * <pre>
         * 缺少必备项
         * </pre>
         */
        public static final int ERRNO_CODE_WITHOUT_TAG_VALUE = 107;
        /**
         * <code>ERRNO_CODE_WITHOUT_UID = 108;</code>
         * <p>
         * <pre>
         * 缺少uid
         * </pre>
         */
        public static final int ERRNO_CODE_WITHOUT_UID_VALUE = 108;
        /**
         * <code>ERRNO_CODE_WITHOUT_TERMID = 109;</code>
         * <p>
         * <pre>
         * 缺少termid
         * </pre>
         */
        public static final int ERRNO_CODE_WITHOUT_TERMID_VALUE = 109;
        /**
         * <code>ERRNO_CODE_ERR_SESSIONID = 110;</code>
         * <p>
         * <pre>
         * 上传请求的TAG_SESSION_ID无效
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_SESSIONID_VALUE = 110;
        /**
         * <code>ERRNO_CODE_TERM_UNALIVE = 111;</code>
         * <p>
         * <pre>
         * 终端去活
         * </pre>
         */
        public static final int ERRNO_CODE_TERM_UNALIVE_VALUE = 111;
        /**
         * <code>ERRNO_CODE_ERR_UID = 112;</code>
         * <p>
         * <pre>
         * uid错误
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_UID_VALUE = 112;
        /**
         * <code>ERRNO_CODE_ERR_PID = 113;</code>
         * <p>
         * <pre>
         * Pid错误
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_PID_VALUE = 113;
        /**
         * <code>ERRNO_CODE_ERR_RESEND = 114;</code>
         * <p>
         * <pre>
         * 重复消息
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_RESEND_VALUE = 114;
        /**
         * <code>ERRNO_CODE_ERR_TID = 115;</code>
         * <p>
         * <pre>
         * Tid错误
         * </pre>
         */
        public static final int ERRNO_CODE_ERR_TID_VALUE = 115;
        /**
         * <code>ERRNO_CODE_SQL = 200;</code>
         * <p>
         * <pre>
         * Storage failure
         * </pre>
         */
        public static final int ERRNO_CODE_SQL_VALUE = 200;
        /**
         * <code>ERRNO_CODE_DATA_SRAL = 201;</code>
         * <p>
         * <pre>
         * 数据序列化失败
         * </pre>
         */
        public static final int ERRNO_CODE_DATA_SRAL_VALUE = 201;
        /**
         * <code>ERRNO_CODE_NOT_FIND_TARGET_USERID = 203;</code>
         * <p>
         * <pre>
         * 没找到对方的用户id
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_FIND_TARGET_USERID_VALUE = 203;
        /**
         * <code>ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL = 204;</code>
         * <p>
         * <pre>
         * MYSQL数据入库失败
         * </pre>
         */
        public static final int ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL_VALUE = 204;
        /**
         * <code>ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS = 205;</code>
         * <p>
         * <pre>
         * redis数据入库失败
         * </pre>
         */
        public static final int ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS_VALUE = 205;
        /**
         * <code>ERRNO_CODE_DB_SERVER_EXCEPTION = 206;</code>
         * <p>
         * <pre>
         * 数据库服务器异常
         * </pre>
         */
        public static final int ERRNO_CODE_DB_SERVER_EXCEPTION_VALUE = 206;
        /**
         * <code>ERRNO_CODE_USER_SESSION_ERROR = 207;</code>
         * <p>
         * <pre>
         * 登陆的sissionid不正确
         * </pre>
         */
        public static final int ERRNO_CODE_USER_SESSION_ERROR_VALUE = 207;
        /**
         * <code>ERRNO_CODE_USER_NOT_LOGIN = 208;</code>
         * <p>
         * <pre>
         * 用户未登陆
         * </pre>
         */
        public static final int ERRNO_CODE_USER_NOT_LOGIN_VALUE = 208;
        /**
         * <code>ERRNO_CODE_USER_ID_ERROR = 209;</code>
         * <p>
         * <pre>
         * 登陆的user_id不正确
         * </pre>
         */
        public static final int ERRNO_CODE_USER_ID_ERROR_VALUE = 209;
        /**
         * <code>ERRNO_CODE_USER_SEND_TOROUTE_ERROR = 210;</code>
         * <p>
         * <pre>
         * 转发至路由失败
         * </pre>
         */
        public static final int ERRNO_CODE_USER_SEND_TOROUTE_ERROR_VALUE = 210;
        /**
         * <code>ERRNO_CODE_NOT_DST_PHONE = 211;</code>
         * <p>
         * <pre>
         * 缺少对方的电话号码
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_DST_PHONE_VALUE = 211;
        /**
         * <code>ERRNO_CODE_DATABASE_QUERY_FAILDED = 212;</code>
         * <p>
         * <pre>
         * 数据库查询失败
         * </pre>
         */
        public static final int ERRNO_CODE_DATABASE_QUERY_FAILDED_VALUE = 212;
        /**
         * <code>ERRNO_CODE_DATA_EXCEPTION = 213;</code>
         * <p>
         * <pre>
         * 数据异常
         * </pre>
         */
        public static final int ERRNO_CODE_DATA_EXCEPTION_VALUE = 213;
        /**
         * <code>ERRNO_CODE_NOT_SESSIONID = 214;</code>
         * <p>
         * <pre>
         * 没有携带session id
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_SESSIONID_VALUE = 214;
        /**
         * <code>ERRNO_CODE_NOT_PHONE = 215;</code>
         * <p>
         * <pre>
         * 没有携带手机号码
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_PHONE_VALUE = 215;
        /**
         * <code>ERRNO_CODE_PHONE_ERROR = 216;</code>
         * <p>
         * <pre>
         * 手机号码错误
         * </pre>
         */
        public static final int ERRNO_CODE_PHONE_ERROR_VALUE = 216;
        /**
         * <code>ERRNO_CODE_DATABASE_NOT_DATA = 217;</code>
         * <p>
         * <pre>
         * 数据库没有数据
         * </pre>
         */
        public static final int ERRNO_CODE_DATABASE_NOT_DATA_VALUE = 217;
        /**
         * <code>ERRNO_CODE_SHOW_EXPIRED = 218;</code>
         * <p>
         * <pre>
         * 对方的秀已经过期
         * </pre>
         */
        public static final int ERRNO_CODE_SHOW_EXPIRED_VALUE = 218;
        /**
         * <code>ERRNO_CODE_NOT_TOKEN_ID = 219;</code>
         * <p>
         * <pre>
         * 没有携带token id
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_TOKEN_ID_VALUE = 219;
        /**
         * <code>ERRNO_CODE_NOT_SHOW = 220;</code>
         * <p>
         * <pre>
         * 没有找到对方的秀信息
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_SHOW_VALUE = 220;
        /**
         * <code>ERRNO_CODE_NOT_HUXIN_USER = 403;</code>
         * <p>
         * <pre>
         * 非呼信用户
         * </pre>
         */
        public static final int ERRNO_CODE_NOT_HUXIN_USER_VALUE = 403;
        /**
         * <code>ERRNO_CODE_BLOCKED_BY_DST_USER = 501;</code>
         * <p>
         * <pre>
         * </pre>
         */
        public static final int ERRNO_CODE_BLOCKED_BY_DST_USER_VALUE = 501;
        /**
         * <code>ERRNO_CODE_INVALID_USER_INFO = 1101;</code>
         */
        public static final int ERRNO_CODE_INVALID_USER_INFO_VALUE = 1101;
        /**
         * <code>ERRNO_CODE_INVALID_SESSION = 1102;</code>
         */
        public static final int ERRNO_CODE_INVALID_SESSION_VALUE = 1102;
        /**
         * <code>ERRNO_CODE_INVALID_PASSWD = 1103;</code>
         */
        public static final int ERRNO_CODE_INVALID_PASSWD_VALUE = 1103;
        /**
         * <code>ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER = 1201;</code>
         */
        public static final int ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER_VALUE = 1201;
        /**
         * <code>ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED = 1202;</code>
         */
        public static final int ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED_VALUE = 1202;
        /**
         * <code>ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST = 1301;</code>
         */
        public static final int ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST_VALUE = 1301;
        /**
         * <code>ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK = 1302;</code>
         */
        public static final int ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK_VALUE = 1302;


        public final int getNumber() {
            return value;
        }

        public static ERRNO_CODE valueOf(int value) {
            switch (value) {
                case 0:
                    return ERRNO_CODE_OK;
                case 2:
                    return ERRNO_CODE_DEFAULT;
                case 100:
                    return ERRNO_CODE_LOGIN_IN_OTHER_DEVICE;
                case 101:
                    return ERRNO_CODE_NO_PROTOCOL;
                case 102:
                    return ERRNO_CODE_TAG_NO_PROTOCOL;
                case 103:
                    return ERRNO_CODE_PUSH_QUEUE;
                case 104:
                    return ERRNO_CODE_LOGON_NO_PHONE_S;
                case 105:
                    return ERRNO_CODE_HEART_ERR_SESSION_S;
                case 106:
                    return ERRNO_CODE_NOT_LOGON;
                case 107:
                    return ERRNO_CODE_WITHOUT_TAG;
                case 108:
                    return ERRNO_CODE_WITHOUT_UID;
                case 109:
                    return ERRNO_CODE_WITHOUT_TERMID;
                case 110:
                    return ERRNO_CODE_ERR_SESSIONID;
                case 111:
                    return ERRNO_CODE_TERM_UNALIVE;
                case 112:
                    return ERRNO_CODE_ERR_UID;
                case 113:
                    return ERRNO_CODE_ERR_PID;
                case 114:
                    return ERRNO_CODE_ERR_RESEND;
                case 115:
                    return ERRNO_CODE_ERR_TID;
                case 200:
                    return ERRNO_CODE_SQL;
                case 201:
                    return ERRNO_CODE_DATA_SRAL;
                case 203:
                    return ERRNO_CODE_NOT_FIND_TARGET_USERID;
                case 204:
                    return ERRNO_CODE_DATA_WAREHOUSING_FAILURE_MYSQL;
                case 205:
                    return ERRNO_CODE_DATA_WAREHOUSING_FAILURE_REDIS;
                case 206:
                    return ERRNO_CODE_DB_SERVER_EXCEPTION;
                case 207:
                    return ERRNO_CODE_USER_SESSION_ERROR;
                case 208:
                    return ERRNO_CODE_USER_NOT_LOGIN;
                case 209:
                    return ERRNO_CODE_USER_ID_ERROR;
                case 210:
                    return ERRNO_CODE_USER_SEND_TOROUTE_ERROR;
                case 211:
                    return ERRNO_CODE_NOT_DST_PHONE;
                case 212:
                    return ERRNO_CODE_DATABASE_QUERY_FAILDED;
                case 213:
                    return ERRNO_CODE_DATA_EXCEPTION;
                case 214:
                    return ERRNO_CODE_NOT_SESSIONID;
                case 215:
                    return ERRNO_CODE_NOT_PHONE;
                case 216:
                    return ERRNO_CODE_PHONE_ERROR;
                case 217:
                    return ERRNO_CODE_DATABASE_NOT_DATA;
                case 218:
                    return ERRNO_CODE_SHOW_EXPIRED;
                case 219:
                    return ERRNO_CODE_NOT_TOKEN_ID;
                case 220:
                    return ERRNO_CODE_NOT_SHOW;
                case 403:
                    return ERRNO_CODE_NOT_HUXIN_USER;
                case 501:
                    return ERRNO_CODE_BLOCKED_BY_DST_USER;
                case 1101:
                    return ERRNO_CODE_INVALID_USER_INFO;
                case 1102:
                    return ERRNO_CODE_INVALID_SESSION;
                case 1103:
                    return ERRNO_CODE_INVALID_PASSWD;
                case 1201:
                    return ERRNO_CODE_INVALID_IM_CHAT_TARGET_USER;
                case 1202:
                    return ERRNO_CODE_INVALID_IM_CHAT_EMPTY_BODY_NOT_ALLOWED;
                case 1301:
                    return ERRNO_CODE_LOCATIONSHARE_TASK_NOT_EXIST;
                case 1302:
                    return ERRNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ERRNO_CODE>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<ERRNO_CODE>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<ERRNO_CODE>() {
                    public ERRNO_CODE findValueByNumber(int number) {
                        return ERRNO_CODE.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(2);
        }

        private static final ERRNO_CODE[] VALUES = values();

        public static ERRNO_CODE valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        ERRNO_CODE(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:ERRNO_CODE)
    }

    /**
     * Protobuf enum {@code Device_Type}
     */
    public enum Device_Type
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>DeviceType_IPhone = 1;</code>
         */
        DeviceType_IPhone(0, 1),
        /**
         * <code>DeviceType_Android = 2;</code>
         */
        DeviceType_Android(1, 2),
        /**
         * <code>DeviceType_IPad = 3;</code>
         */
        DeviceType_IPad(2, 3),
        /**
         * <code>DeviceType_AndroidPad = 4;</code>
         */
        DeviceType_AndroidPad(3, 4),
        /**
         * <code>DeviceType_UNKNOWN = 5;</code>
         */
        DeviceType_UNKNOWN(4, 5),;

        /**
         * <code>DeviceType_IPhone = 1;</code>
         */
        public static final int DeviceType_IPhone_VALUE = 1;
        /**
         * <code>DeviceType_Android = 2;</code>
         */
        public static final int DeviceType_Android_VALUE = 2;
        /**
         * <code>DeviceType_IPad = 3;</code>
         */
        public static final int DeviceType_IPad_VALUE = 3;
        /**
         * <code>DeviceType_AndroidPad = 4;</code>
         */
        public static final int DeviceType_AndroidPad_VALUE = 4;
        /**
         * <code>DeviceType_UNKNOWN = 5;</code>
         */
        public static final int DeviceType_UNKNOWN_VALUE = 5;


        public final int getNumber() {
            return value;
        }

        public static Device_Type valueOf(int value) {
            switch (value) {
                case 1:
                    return DeviceType_IPhone;
                case 2:
                    return DeviceType_Android;
                case 3:
                    return DeviceType_IPad;
                case 4:
                    return DeviceType_AndroidPad;
                case 5:
                    return DeviceType_UNKNOWN;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Device_Type>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<Device_Type>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<Device_Type>() {
                    public Device_Type findValueByNumber(int number) {
                        return Device_Type.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(3);
        }

        private static final Device_Type[] VALUES = values();

        public static Device_Type valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        Device_Type(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:Device_Type)
    }

    /**
     * Protobuf enum {@code USER_SHOW_STATUS}
     */
    public enum USER_SHOW_STATUS
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>USER_SHOW_STATUS_NORMAL = 0;</code>
         * <p>
         * <pre>
         * 0 正常 1停用 2冻结
         * </pre>
         */
        USER_SHOW_STATUS_NORMAL(0, 0),
        /**
         * <code>USER_SHOW_STATUS_DISABLE = 1;</code>
         */
        USER_SHOW_STATUS_DISABLE(1, 1),
        /**
         * <code>USER_SHOW_STATUS_FROZEN = 2;</code>
         */
        USER_SHOW_STATUS_FROZEN(2, 2),;

        /**
         * <code>USER_SHOW_STATUS_NORMAL = 0;</code>
         * <p>
         * <pre>
         * 0 正常 1停用 2冻结
         * </pre>
         */
        public static final int USER_SHOW_STATUS_NORMAL_VALUE = 0;
        /**
         * <code>USER_SHOW_STATUS_DISABLE = 1;</code>
         */
        public static final int USER_SHOW_STATUS_DISABLE_VALUE = 1;
        /**
         * <code>USER_SHOW_STATUS_FROZEN = 2;</code>
         */
        public static final int USER_SHOW_STATUS_FROZEN_VALUE = 2;


        public final int getNumber() {
            return value;
        }

        public static USER_SHOW_STATUS valueOf(int value) {
            switch (value) {
                case 0:
                    return USER_SHOW_STATUS_NORMAL;
                case 1:
                    return USER_SHOW_STATUS_DISABLE;
                case 2:
                    return USER_SHOW_STATUS_FROZEN;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<USER_SHOW_STATUS>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<USER_SHOW_STATUS>
                internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<USER_SHOW_STATUS>() {
                    public USER_SHOW_STATUS findValueByNumber(int number) {
                        return USER_SHOW_STATUS.valueOf(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return YouMaiBasic.getDescriptor().getEnumTypes().get(4);
        }

        private static final USER_SHOW_STATUS[] VALUES = values();

        public static USER_SHOW_STATUS valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        USER_SHOW_STATUS(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:USER_SHOW_STATUS)
    }

    public interface Heart_BeatOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Heart_Beat)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * Protobuf type {@code Heart_Beat}
     * <p>
     * <pre>
     * optional int32 IM_id = 1;
     * </pre>
     */
    public static final class Heart_Beat extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:Heart_Beat)
            Heart_BeatOrBuilder {
        // Use Heart_Beat.newBuilder() to construct.
        private Heart_Beat(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Heart_Beat(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Heart_Beat defaultInstance;

        public static Heart_Beat getDefaultInstance() {
            return defaultInstance;
        }

        public Heart_Beat getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Heart_Beat(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            YouMaiBasic.Heart_Beat.class, YouMaiBasic.Heart_Beat.Builder.class);
        }

        public static com.google.protobuf.Parser<Heart_Beat> PARSER =
                new com.google.protobuf.AbstractParser<Heart_Beat>() {
                    public Heart_Beat parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new Heart_Beat(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<Heart_Beat> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static YouMaiBasic.Heart_Beat parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static YouMaiBasic.Heart_Beat parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(YouMaiBasic.Heart_Beat prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Heart_Beat}
         * <p>
         * <pre>
         * optional int32 IM_id = 1;
         * </pre>
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Heart_Beat)
                YouMaiBasic.Heart_BeatOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                YouMaiBasic.Heart_Beat.class, YouMaiBasic.Heart_Beat.Builder.class);
            }

            // Construct using YouMaiBasic.Heart_Beat.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_descriptor;
            }

            public YouMaiBasic.Heart_Beat getDefaultInstanceForType() {
                return YouMaiBasic.Heart_Beat.getDefaultInstance();
            }

            public YouMaiBasic.Heart_Beat build() {
                YouMaiBasic.Heart_Beat result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public YouMaiBasic.Heart_Beat buildPartial() {
                YouMaiBasic.Heart_Beat result = new YouMaiBasic.Heart_Beat(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof YouMaiBasic.Heart_Beat) {
                    return mergeFrom((YouMaiBasic.Heart_Beat) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(YouMaiBasic.Heart_Beat other) {
                if (other == YouMaiBasic.Heart_Beat.getDefaultInstance())
                    return this;
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                YouMaiBasic.Heart_Beat parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (YouMaiBasic.Heart_Beat) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Heart_Beat)
        }

        static {
            defaultInstance = new Heart_Beat(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Heart_Beat)
    }

    public interface Heart_Beat_AckOrBuilder extends
            // @@protoc_insertion_point(interface_extends:Heart_Beat_Ack)
            com.google.protobuf.MessageOrBuilder {
    }

    /**
     * Protobuf type {@code Heart_Beat_Ack}
     * <p>
     * <pre>
     * optional int32 IM_id = 1;
     * </pre>
     */
    public static final class Heart_Beat_Ack extends
            com.google.protobuf.GeneratedMessage implements
            // @@protoc_insertion_point(message_implements:Heart_Beat_Ack)
            Heart_Beat_AckOrBuilder {
        // Use Heart_Beat_Ack.newBuilder() to construct.
        private Heart_Beat_Ack(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Heart_Beat_Ack(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Heart_Beat_Ack defaultInstance;

        public static Heart_Beat_Ack getDefaultInstance() {
            return defaultInstance;
        }

        public Heart_Beat_Ack getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private Heart_Beat_Ack(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            YouMaiBasic.Heart_Beat_Ack.class, YouMaiBasic.Heart_Beat_Ack.Builder.class);
        }

        public static com.google.protobuf.Parser<Heart_Beat_Ack> PARSER =
                new com.google.protobuf.AbstractParser<Heart_Beat_Ack>() {
                    public Heart_Beat_Ack parsePartialFrom(
                            com.google.protobuf.CodedInputStream input,
                            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                            throws com.google.protobuf.InvalidProtocolBufferException {
                        return new Heart_Beat_Ack(input, extensionRegistry);
                    }
                };

        @java.lang.Override
        public com.google.protobuf.Parser<Heart_Beat_Ack> getParserForType() {
            return PARSER;
        }

        private void initFields() {
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            getSerializedSize();
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace()
                throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static YouMaiBasic.Heart_Beat_Ack parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(YouMaiBasic.Heart_Beat_Ack prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Heart_Beat_Ack}
         * <p>
         * <pre>
         * optional int32 IM_id = 1;
         * </pre>
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessage.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:Heart_Beat_Ack)
                YouMaiBasic.Heart_Beat_AckOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                YouMaiBasic.Heart_Beat_Ack.class, YouMaiBasic.Heart_Beat_Ack.Builder.class);
            }

            // Construct using YouMaiBasic.Heart_Beat_Ack.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return YouMaiBasic.internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_descriptor;
            }

            public YouMaiBasic.Heart_Beat_Ack getDefaultInstanceForType() {
                return YouMaiBasic.Heart_Beat_Ack.getDefaultInstance();
            }

            public YouMaiBasic.Heart_Beat_Ack build() {
                YouMaiBasic.Heart_Beat_Ack result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public YouMaiBasic.Heart_Beat_Ack buildPartial() {
                YouMaiBasic.Heart_Beat_Ack result = new YouMaiBasic.Heart_Beat_Ack(this);
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof YouMaiBasic.Heart_Beat_Ack) {
                    return mergeFrom((YouMaiBasic.Heart_Beat_Ack) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(YouMaiBasic.Heart_Beat_Ack other) {
                if (other == YouMaiBasic.Heart_Beat_Ack.getDefaultInstance())
                    return this;
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                YouMaiBasic.Heart_Beat_Ack parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (YouMaiBasic.Heart_Beat_Ack) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Heart_Beat_Ack)
        }

        static {
            defaultInstance = new Heart_Beat_Ack(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Heart_Beat_Ack)
    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_com_youmai_hxsdk_proto_Heart_Beat_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_com_youmai_hxsdk_proto_Heart_Beat_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_descriptor;
    private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        java.lang.String[] descriptorData = {
                "\n\022YouMai.Basic.proto\022\026com.youmai.hxsdk.p" +
                        "roto\"\014\n\nHeart_Beat\"\020\n\016Heart_Beat_Ack*\372\023\n" +
                        "\tCOMMANDID\022\016\n\nHEART_BEAT\020\001\022\022\n\016HEART_BEAT" +
                        "_ACK\020\002\022\r\n\tROUTE_REQ\020\024\022\016\n\nUSER_LOGIN\020e\022\022\n" +
                        "\016USER_LOGIN_ACK\020f\022\017\n\013USER_LOGOFF\020g\022\023\n\017US" +
                        "ER_LOGOFF_ACK\020h\022\036\n\032MULTI_DEVICE_KICKED_N" +
                        "OTIFY\020i\022\013\n\007IM_TEXT\020j\022\016\n\nIM_PICTURE\020k\022\014\n\010" +
                        "IM_AUDIO\020l\022\014\n\010IM_VIDEO\020m\022\n\n\006IM_URL\020n\022\017\n\013" +
                        "IM_LOCATION\020o\022\033\n\027IM_LOCATION_SHARE_BEGIN" +
                        "\020p\022\034\n\030IM_LOCATION_SHARE_ANSWER\020q\022\036\n\032IM_L",
                "OCATION_SHARE_CONTINUE\020r\022\031\n\025IM_LOCATION_" +
                        "SHARE_END\020s\022\r\n\tPHONEDIAL\020u\022\021\n\rPHONEDIAL_" +
                        "ACK\020v\022\025\n\021GET_CONTACTS_INFO\020w\022\031\n\025GET_CONT" +
                        "ACTS_INFO_ACK\020x\022\031\n\025PHP_USER_MODIFYSTATUS" +
                        "\020y\022\035\n\031PHP_USER_MODIFYSTATUS_ACK\020z\022\036\n\032PHP" +
                        "_ADMIN_MODIFYUSERSTATUS\020{\022\"\n\036PHP_ADMIN_M" +
                        "ODIFYUSERSTATUS_ACK\020|\022\023\n\017IMCHAT_PERSONAL" +
                        "\020}\022\027\n\023IMCHAT_PERSONAL_ACK\020~\022\032\n\026IMCHAT_PE" +
                        "RSONAL_NOTIFY\020\177\022\017\n\nREQUEST_IP\020\220\003\022\023\n\016REQU" +
                        "EST_IP_ACK\020\221\003\022 \n\033REGIST_COMMUNICATIONSER",
                "VICE\020\222\003\022\024\n\017GENERAL_MESSAGE\020\365\003\022\030\n\023POP_GEN" +
                        "ERAL_MESSAGE\020\366\003\022\034\n\027POP_GENERAL_MESSAGE_A" +
                        "CK\020\367\003\022\r\n\010BULLETIN\020\330\004\022\024\n\017BULLETIN_NOTIFY\020" +
                        "\331\004\022\025\n\020BULLETIN_PUBLISH\020\335\004\022\031\n\024BULLETIN_PU" +
                        "BLISH_ACK\020\336\004\022\030\n\023BIZCARD_GET_BYPHONE\020\275\005\022\034" +
                        "\n\027BIZCARD_GET_BYPHONE_ACK\020\276\005\022\023\n\016BIZCARD_" +
                        "INSERT\020\277\005\022\027\n\022BIZCARD_INSERT_ACK\020\300\005\022\023\n\016BI" +
                        "ZCARD_UPDATE\020\301\005\022\027\n\022BIZCARD_UPDATE_ACK\020\302\005" +
                        "\022\023\n\016BIZCARD_DELETE\020\303\005\022\027\n\022BIZCARD_DELETE_" +
                        "ACK\020\304\005\022\026\n\021BUSINESS_QUERY_AD\020\356\005\022\032\n\025BUSINE",
                "SS_QUERY_AD_ACK\020\357\005\022\025\n\020BUSINESS_SAVE_AD\020\360" +
                        "\005\022\031\n\024BUSINESS_SAVE_AD_ACK\020\361\005\022\027\n\022BUSINESS" +
                        "_UPDATE_AD\020\362\005\022\033\n\026BUSINESS_UPDATE_AD_ACK\020" +
                        "\363\005\022\027\n\022BUSINESS_DELETE_AD\020\364\005\022\033\n\026BUSINESS_" +
                        "DELETE_AD_ACK\020\365\005\022\030\n\023USERSHOWRULE_RESULT\020" +
                        "\366\005\022\025\n\020USERSHOWRULE_GET\020\367\005\022\026\n\021USERSHOWRUL" +
                        "E_SAVE\020\370\005\022\030\n\023USERSHOWRULE_UPDATE\020\371\005\022\030\n\023U" +
                        "SERSHOWRULE_DELETE\020\372\005\022\017\n\nBONDERY_MQ\020\220N\022\017" +
                        "\n\nSYSTEM_LOG\020\221N\022\022\n\rLOCATIONSHARE\020\314S\022\031\n\024L" +
                        "OCATIONSHARE_NOTIFY\020\315S\022\030\n\023LOCATIONSHARE_",
                "INVIT\020\316S\022\034\n\027LOCATIONSHARE_INVIT_ACK\020\317S\022\037" +
                        "\n\032LOCATIONSHARE_INVIT_NOTIFY\020\320S\022\027\n\022LOCAT" +
                        "IONSHARE_JOIN\020\321S\022\033\n\026LOCATIONSHARE_JOIN_A" +
                        "CK\020\322S\022\036\n\031LOCATIONSHARE_JOIN_NOTIFY\020\323S\022\027\n" +
                        "\022LOCATIONSHARE_QUIT\020\325S\022\033\n\026LOCATIONSHARE_" +
                        "QUIT_ACK\020\326S\022\036\n\031LOCATIONSHARE_QUIT_NOTIFY" +
                        "\020\327S\022\016\n\tPUSH_APNS\020\261T\022\022\n\rPUSH_APNS_ACK\020\262T\022" +
                        "\021\n\014PUSH_GENERAL\020\265T\022\r\n\010PUSH_SMS\020\266T\022\025\n\020END" +
                        "ORSEMENT_TAKE\020\225U\022\031\n\024ENDORSEMENT_TAKE_ACK" +
                        "\020\226U\022\026\n\021ENDORSEMENT_QUERY\020\237U\022\032\n\025ENDORSEME",
                "NT_QUERY_ACK\020\240U\022\026\n\021ENDORSEMENT_DELET\020\251U\022" +
                        "\033\n\026ENDORSEMENT_DELETE_ACK\020\252U\022\034\n\027ENDORSEM" +
                        "ENT_ADMIN_QUERY\020\307U\022 \n\033ENDORSEMENT_ADMIN_" +
                        "QUERY_ACK\020\310U\022\022\n\rSHOWBIZ_QUERY\020\371U\022\026\n\021SHOW" +
                        "BIZ_QUERY_ACK\020\372U\022\023\n\016SHOWBIZ_INSERT\020\203V\022\027\n" +
                        "\022SHOWBIZ_INSERT_ACK\020\204V\022\023\n\016SHOWBIZ_DELETE" +
                        "\020\215V\022\027\n\022SHOWBIZ_DELETE_ACK\020\216V\022\023\n\016SHOWBIZ_" +
                        "UPDATE\020\227V\022\027\n\022SHOWBIZ_UPDATE_ACK\020\230V\022\027\n\022SH" +
                        "OWPERSONAL_QUERY\020\241V\022\033\n\026SHOWPERSONAL_QUER" +
                        "Y_ACK\020\242V\022\030\n\023SHOWPERSONAL_INSERT\020\253V\022\034\n\027SH",
                "OWPERSONAL_INSERT_ACK\020\254V\022\030\n\023SHOWPERSONAL" +
                        "_UPDATE\020\265V\022\034\n\027SHOWPERSONAL_UPDATE_ACK\020\266V" +
                        "\022\030\n\023SHOWPERSONAL_DELETE\020\277V\022\034\n\027SHOWPERSON" +
                        "AL_DELETE_ACK\020\300V\022\r\n\010SHOWDIAL\020\311V\022\021\n\014SHOWD" +
                        "IAL_ACK\020\312V\022\024\n\017SHOWDIAL_NOTIFY\020\313V\022\'\n\"SHOW" +
                        "DIAL_CACHE_UPDATE_SYSTEMNOTIFY\020\323V*X\n\tUSE" +
                        "R_TYPE\022\025\n\021USER_TYPE_UNKNOWN\020\000\022\026\n\022USER_TY" +
                        "PE_PERSONAL\020\001\022\034\n\030USER_TYPE_PUBLIC_ACCOUN" +
                        "T\020\002*\223\014\n\nERRNO_CODE\022\021\n\rERRNO_CODE_OK\020\000\022\026\n" +
                        "\022ERRNO_CODE_DEFAULT\020\002\022$\n ERRNO_CODE_LOGI",
                "N_IN_OTHER_DEVICE\020d\022\032\n\026ERRNO_CODE_NO_PRO" +
                        "TOCOL\020e\022\036\n\032ERRNO_CODE_TAG_NO_PROTOCOL\020f\022" +
                        "\031\n\025ERRNO_CODE_PUSH_QUEUE\020g\022\037\n\033ERRNO_CODE" +
                        "_LOGON_NO_PHONE_S\020h\022\"\n\036ERRNO_CODE_HEART_" +
                        "ERR_SESSION_S\020i\022\030\n\024ERRNO_CODE_NOT_LOGON\020" +
                        "j\022\032\n\026ERRNO_CODE_WITHOUT_TAG\020k\022\032\n\026ERRNO_C" +
                        "ODE_WITHOUT_UID\020l\022\035\n\031ERRNO_CODE_WITHOUT_" +
                        "TERMID\020m\022\034\n\030ERRNO_CODE_ERR_SESSIONID\020n\022\033" +
                        "\n\027ERRNO_CODE_TERM_UNALIVE\020o\022\026\n\022ERRNO_COD" +
                        "E_ERR_UID\020p\022\026\n\022ERRNO_CODE_ERR_PID\020q\022\031\n\025E",
                "RRNO_CODE_ERR_RESEND\020r\022\026\n\022ERRNO_CODE_ERR" +
                        "_TID\020s\022\023\n\016ERRNO_CODE_SQL\020\310\001\022\031\n\024ERRNO_COD" +
                        "E_DATA_SRAL\020\311\001\022&\n!ERRNO_CODE_NOT_FIND_TA" +
                        "RGET_USERID\020\313\001\022.\n)ERRNO_CODE_DATA_WAREHO" +
                        "USING_FAILURE_MYSQL\020\314\001\022.\n)ERRNO_CODE_DAT" +
                        "A_WAREHOUSING_FAILURE_REDIS\020\315\001\022#\n\036ERRNO_" +
                        "CODE_DB_SERVER_EXCEPTION\020\316\001\022\"\n\035ERRNO_COD" +
                        "E_USER_SESSION_ERROR\020\317\001\022\036\n\031ERRNO_CODE_US" +
                        "ER_NOT_LOGIN\020\320\001\022\035\n\030ERRNO_CODE_USER_ID_ER" +
                        "ROR\020\321\001\022\'\n\"ERRNO_CODE_USER_SEND_TOROUTE_E",
                "RROR\020\322\001\022\035\n\030ERRNO_CODE_NOT_DST_PHONE\020\323\001\022&" +
                        "\n!ERRNO_CODE_DATABASE_QUERY_FAILDED\020\324\001\022\036" +
                        "\n\031ERRNO_CODE_DATA_EXCEPTION\020\325\001\022\035\n\030ERRNO_" +
                        "CODE_NOT_SESSIONID\020\326\001\022\031\n\024ERRNO_CODE_NOT_" +
                        "PHONE\020\327\001\022\033\n\026ERRNO_CODE_PHONE_ERROR\020\330\001\022!\n" +
                        "\034ERRNO_CODE_DATABASE_NOT_DATA\020\331\001\022\034\n\027ERRN" +
                        "O_CODE_SHOW_EXPIRED\020\332\001\022\034\n\027ERRNO_CODE_NOT" +
                        "_TOKEN_ID\020\333\001\022\030\n\023ERRNO_CODE_NOT_SHOW\020\334\001\022\036" +
                        "\n\031ERRNO_CODE_NOT_HUXIN_USER\020\223\003\022#\n\036ERRNO_" +
                        "CODE_BLOCKED_BY_DST_USER\020\365\003\022!\n\034ERRNO_COD",
                "E_INVALID_USER_INFO\020\315\010\022\037\n\032ERRNO_CODE_INV" +
                        "ALID_SESSION\020\316\010\022\036\n\031ERRNO_CODE_INVALID_PA" +
                        "SSWD\020\317\010\022+\n&ERRNO_CODE_INVALID_IM_CHAT_TA" +
                        "RGET_USER\020\261\t\0226\n1ERRNO_CODE_INVALID_IM_CH" +
                        "AT_EMPTY_BODY_NOT_ALLOWED\020\262\t\022,\n\'ERRNO_CO" +
                        "DE_LOCATIONSHARE_TASK_NOT_EXIST\020\225\n\022-\n(ER" +
                        "RNO_CODE_LOCATIONSHARE_NOT_INSIDE_TASK\020\226" +
                        "\n*\204\001\n\013Device_Type\022\025\n\021DeviceType_IPhone\020\001" +
                        "\022\026\n\022DeviceType_Android\020\002\022\023\n\017DeviceType_I" +
                        "Pad\020\003\022\031\n\025DeviceType_AndroidPad\020\004\022\026\n\022Devi",
                "ceType_UNKNOWN\020\005*j\n\020USER_SHOW_STATUS\022\033\n\027" +
                        "USER_SHOW_STATUS_NORMAL\020\000\022\034\n\030USER_SHOW_S" +
                        "TATUS_DISABLE\020\001\022\033\n\027USER_SHOW_STATUS_FROZ" +
                        "EN\020\002"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                        new com.google.protobuf.Descriptors.FileDescriptor[]{
                        }, assigner);
        internal_static_com_youmai_hxsdk_proto_Heart_Beat_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_com_youmai_hxsdk_proto_Heart_Beat_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_com_youmai_hxsdk_proto_Heart_Beat_descriptor,
                new java.lang.String[]{});
        internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_com_youmai_hxsdk_proto_Heart_Beat_Ack_descriptor,
                new java.lang.String[]{});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
